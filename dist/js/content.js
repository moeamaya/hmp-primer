(()=>{var Vi=Object.create;var Vr=Object.defineProperty;var qi=Object.getOwnPropertyDescriptor;var $i=Object.getOwnPropertyNames;var Gi=Object.getPrototypeOf,Hi=Object.prototype.hasOwnProperty;var Ki=(S,x)=>()=>(x||S((x={exports:{}}).exports,x),x.exports);var Zi=(S,x,R,X)=>{if(x&&typeof x=="object"||typeof x=="function")for(let U of $i(x))!Hi.call(S,U)&&U!==R&&Vr(S,U,{get:()=>x[U],enumerable:!(X=qi(x,U))||X.enumerable});return S};var Ji=(S,x,R)=>(R=S!=null?Vi(Gi(S)):{},Zi(x||!S||!S.__esModule?Vr(R,"default",{value:S,enumerable:!0}):R,S));var Gr=Ki(($r,Mn)=>{(function(S){typeof $r=="object"&&typeof Mn<"u"?Mn.exports=S():typeof define=="function"&&define.amd?define([],S):(typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:this).interact=S()})(function(){var S={};Object.defineProperty(S,"__esModule",{value:!0}),S.default=void 0,S.default=function(e){return!(!e||!e.Window)&&e instanceof e.Window};var x={};Object.defineProperty(x,"__esModule",{value:!0}),x.getWindow=function(e){return(0,S.default)(e)?e:(e.ownerDocument||e).defaultView||X.window},x.init=U,x.window=x.realWindow=void 0;var R=void 0;x.realWindow=R;var X=void 0;function U(e){x.realWindow=R=e;var t=e.document.createTextNode("");t.ownerDocument!==e.document&&typeof e.wrap=="function"&&e.wrap(t)===t&&(e=e.wrap(e)),x.window=X=e}x.window=X,typeof window<"u"&&window&&U(window);var v={};function K(e){return K=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},K(e)}Object.defineProperty(v,"__esModule",{value:!0}),v.default=void 0;var rt=function(e){return!!e&&K(e)==="object"},In=function(e){return typeof e=="function"},Hr={window:function(e){return e===x.window||(0,S.default)(e)},docFrag:function(e){return rt(e)&&e.nodeType===11},object:rt,func:In,number:function(e){return typeof e=="number"},bool:function(e){return typeof e=="boolean"},string:function(e){return typeof e=="string"},element:function(e){if(!e||K(e)!=="object")return!1;var t=x.getWindow(e)||x.window;return/object|function/.test(typeof Element>"u"?"undefined":K(Element))?e instanceof Element||e instanceof t.Element:e.nodeType===1&&typeof e.nodeName=="string"},plainObject:function(e){return rt(e)&&!!e.constructor&&/function Object\b/.test(e.constructor.toString())},array:function(e){return rt(e)&&e.length!==void 0&&In(e.splice)}};v.default=Hr;var Fe={};function Lt(e){var t=e.interaction;if(t.prepared.name==="drag"){var n=t.prepared.axis;n==="x"?(t.coords.cur.page.y=t.coords.start.page.y,t.coords.cur.client.y=t.coords.start.client.y,t.coords.velocity.client.y=0,t.coords.velocity.page.y=0):n==="y"&&(t.coords.cur.page.x=t.coords.start.page.x,t.coords.cur.client.x=t.coords.start.client.x,t.coords.velocity.client.x=0,t.coords.velocity.page.x=0)}}function Dn(e){var t=e.iEvent,n=e.interaction;if(n.prepared.name==="drag"){var r=n.prepared.axis;if(r==="x"||r==="y"){var o=r==="x"?"y":"x";t.page[o]=n.coords.start.page[o],t.client[o]=n.coords.start.client[o],t.delta[o]=0}}}Object.defineProperty(Fe,"__esModule",{value:!0}),Fe.default=void 0;var ot={id:"actions/drag",install:function(e){var t=e.actions,n=e.Interactable,r=e.defaults;n.prototype.draggable=ot.draggable,t.map.drag=ot,t.methodDict.drag="draggable",r.actions.drag=ot.defaults},listeners:{"interactions:before-action-move":Lt,"interactions:action-resume":Lt,"interactions:action-move":Dn,"auto-start:check":function(e){var t=e.interaction,n=e.interactable,r=e.buttons,o=n.options.drag;if(o&&o.enabled&&(!t.pointerIsDown||!/mouse|pointer/.test(t.pointerType)||(r&n.options.drag.mouseButtons)!=0))return e.action={name:"drag",axis:o.lockAxis==="start"?o.startAxis:o.lockAxis},!1}},draggable:function(e){return v.default.object(e)?(this.options.drag.enabled=e.enabled!==!1,this.setPerAction("drag",e),this.setOnEvents("drag",e),/^(xy|x|y|start)$/.test(e.lockAxis)&&(this.options.drag.lockAxis=e.lockAxis),/^(xy|x|y)$/.test(e.startAxis)&&(this.options.drag.startAxis=e.startAxis),this):v.default.bool(e)?(this.options.drag.enabled=e,this):this.options.drag},beforeMove:Lt,move:Dn,defaults:{startAxis:"xy",lockAxis:"xy"},getCursor:function(){return"move"}},Kr=ot;Fe.default=Kr;var B={};Object.defineProperty(B,"__esModule",{value:!0}),B.default=void 0;var Z={init:function(e){var t=e;Z.document=t.document,Z.DocumentFragment=t.DocumentFragment||Se,Z.SVGElement=t.SVGElement||Se,Z.SVGSVGElement=t.SVGSVGElement||Se,Z.SVGElementInstance=t.SVGElementInstance||Se,Z.Element=t.Element||Se,Z.HTMLElement=t.HTMLElement||Z.Element,Z.Event=t.Event,Z.Touch=t.Touch||Se,Z.PointerEvent=t.PointerEvent||t.MSPointerEvent},document:null,DocumentFragment:null,SVGElement:null,SVGSVGElement:null,SVGElementInstance:null,Element:null,HTMLElement:null,Event:null,Touch:null,PointerEvent:null};function Se(){}var Zr=Z;B.default=Zr;var q={};Object.defineProperty(q,"__esModule",{value:!0}),q.default=void 0;var J={init:function(e){var t=B.default.Element,n=e.navigator||{};J.supportsTouch="ontouchstart"in e||v.default.func(e.DocumentTouch)&&B.default.document instanceof e.DocumentTouch,J.supportsPointerEvent=n.pointerEnabled!==!1&&!!B.default.PointerEvent,J.isIOS=/iP(hone|od|ad)/.test(n.platform),J.isIOS7=/iP(hone|od|ad)/.test(n.platform)&&/OS 7[^\d]/.test(n.appVersion),J.isIe9=/MSIE 9/.test(n.userAgent),J.isOperaMobile=n.appName==="Opera"&&J.supportsTouch&&/Presto/.test(n.userAgent),J.prefixedMatchesSelector="matches"in t.prototype?"matches":"webkitMatchesSelector"in t.prototype?"webkitMatchesSelector":"mozMatchesSelector"in t.prototype?"mozMatchesSelector":"oMatchesSelector"in t.prototype?"oMatchesSelector":"msMatchesSelector",J.pEventTypes=J.supportsPointerEvent?B.default.PointerEvent===e.MSPointerEvent?{up:"MSPointerUp",down:"MSPointerDown",over:"mouseover",out:"mouseout",move:"MSPointerMove",cancel:"MSPointerCancel"}:{up:"pointerup",down:"pointerdown",over:"pointerover",out:"pointerout",move:"pointermove",cancel:"pointercancel"}:null,J.wheelEvent=B.default.document&&"onmousewheel"in B.default.document?"mousewheel":"wheel"},supportsTouch:null,supportsPointerEvent:null,isIOS7:null,isIOS:null,isIe9:null,isOperaMobile:null,prefixedMatchesSelector:null,pEventTypes:null,wheelEvent:null},Jr=J;q.default=Jr;var O={};function it(e){var t=e.parentNode;if(v.default.docFrag(t)){for(;(t=t.host)&&v.default.docFrag(t););return t}return t}function at(e,t){return x.window!==x.realWindow&&(t=t.replace(/\/deep\//g," ")),e[q.default.prefixedMatchesSelector](t)}Object.defineProperty(O,"__esModule",{value:!0}),O.closest=function(e,t){for(;v.default.element(e);){if(at(e,t))return e;e=it(e)}return null},O.getActualElement=function(e){return e.correspondingUseElement||e},O.getElementClientRect=zn,O.getElementRect=function(e){var t=zn(e);if(!q.default.isIOS7&&t){var n=Rn(x.getWindow(e));t.left+=n.x,t.right+=n.x,t.top+=n.y,t.bottom+=n.y}return t},O.getPath=function(e){for(var t=[];e;)t.push(e),e=it(e);return t},O.getScrollXY=Rn,O.indexOfDeepestElement=function(e){for(var t,n=[],r=0;r<e.length;r++){var o=e[r],i=e[t];if(o&&r!==t)if(i){var l=Wt(o),a=Wt(i);if(l!==o.ownerDocument)if(a!==o.ownerDocument)if(l!==a){n=n.length?n:An(i);var s=void 0;if(i instanceof B.default.HTMLElement&&o instanceof B.default.SVGElement&&!(o instanceof B.default.SVGSVGElement)){if(o===a)continue;s=o.ownerSVGElement}else s=o;for(var u=An(s,i.ownerDocument),c=0;u[c]&&u[c]===n[c];)c++;var f=[u[c-1],u[c],n[c]];if(f[0])for(var p=f[0].lastChild;p;){if(p===f[1]){t=r,n=u;break}if(p===f[2])break;p=p.previousSibling}}else h=o,d=i,(parseInt(x.getWindow(h).getComputedStyle(h).zIndex,10)||0)>=(parseInt(x.getWindow(d).getComputedStyle(d).zIndex,10)||0)&&(t=r);else t=r}else t=r}var h,d;return t},O.matchesSelector=at,O.matchesUpTo=function(e,t,n){for(;v.default.element(e);){if(at(e,t))return!0;if((e=it(e))===n)return at(e,t)}return!1},O.nodeContains=function(e,t){if(e.contains)return e.contains(t);for(;t;){if(t===e)return!0;t=t.parentNode}return!1},O.parentNode=it,O.trySelector=function(e){return!!v.default.string(e)&&(B.default.document.querySelector(e),!0)};var Wt=function(e){return e.parentNode||e.host};function An(e,t){for(var n,r=[],o=e;(n=Wt(o))&&o!==t&&n!==o.ownerDocument;)r.unshift(o),o=n;return r}function Rn(e){return{x:(e=e||x.window).scrollX||e.document.documentElement.scrollLeft,y:e.scrollY||e.document.documentElement.scrollTop}}function zn(e){var t=e instanceof B.default.SVGElement?e.getBoundingClientRect():e.getClientRects()[0];return t&&{left:t.left,right:t.right,top:t.top,bottom:t.bottom,width:t.width||t.right-t.left,height:t.height||t.bottom-t.top}}var _={};Object.defineProperty(_,"__esModule",{value:!0}),_.default=function(e,t){for(var n in t)e[n]=t[n];return e};var z={};function Nt(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Cn(e,t,n){return e==="parent"?(0,O.parentNode)(n):e==="self"?t.getRect(n):(0,O.closest)(n,e)}Object.defineProperty(z,"__esModule",{value:!0}),z.addEdges=function(e,t,n){e.left&&(t.left+=n.x),e.right&&(t.right+=n.x),e.top&&(t.top+=n.y),e.bottom&&(t.bottom+=n.y),t.width=t.right-t.left,t.height=t.bottom-t.top},z.getStringOptionResult=Cn,z.rectToXY=function(e){return e&&{x:"x"in e?e.x:e.left,y:"y"in e?e.y:e.top}},z.resolveRectLike=function(e,t,n,r){var o,i=e;return v.default.string(i)?i=Cn(i,t,n):v.default.func(i)&&(i=i.apply(void 0,function(l){if(Array.isArray(l))return Nt(l)}(o=r)||function(l){if(typeof Symbol<"u"&&l[Symbol.iterator]!=null||l["@@iterator"]!=null)return Array.from(l)}(o)||function(l,a){if(l){if(typeof l=="string")return Nt(l,a);var s=Object.prototype.toString.call(l).slice(8,-1);return s==="Object"&&l.constructor&&(s=l.constructor.name),s==="Map"||s==="Set"?Array.from(l):s==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?Nt(l,a):void 0}}(o)||function(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}())),v.default.element(i)&&(i=(0,O.getElementRect)(i)),i},z.tlbrToXywh=function(e){return!e||"x"in e&&"y"in e||((e=(0,_.default)({},e)).x=e.left||0,e.y=e.top||0,e.width=e.width||(e.right||0)-e.x,e.height=e.height||(e.bottom||0)-e.y),e},z.xywhToTlbr=function(e){return!e||"left"in e&&"top"in e||((e=(0,_.default)({},e)).left=e.x||0,e.top=e.y||0,e.right=e.right||e.left+e.width,e.bottom=e.bottom||e.top+e.height),e};var he={};Object.defineProperty(he,"__esModule",{value:!0}),he.default=function(e,t,n){var r=e.options[n],o=r&&r.origin||e.options.origin,i=(0,z.resolveRectLike)(o,e,t,[e&&t]);return(0,z.rectToXY)(i)||{x:0,y:0}};var Te={};function Fn(e){return e.trim().split(/ +/)}Object.defineProperty(Te,"__esModule",{value:!0}),Te.default=function e(t,n,r){if(r=r||{},v.default.string(t)&&t.search(" ")!==-1&&(t=Fn(t)),v.default.array(t))return t.reduce(function(s,u){return(0,_.default)(s,e(u,n,r))},r);if(v.default.object(t)&&(n=t,t=""),v.default.func(n))r[t]=r[t]||[],r[t].push(n);else if(v.default.array(n))for(var o=0;o<n.length;o++){var i;i=n[o],e(t,i,r)}else if(v.default.object(n))for(var l in n){var a=Fn(l).map(function(s){return"".concat(t).concat(s)});e(a,n[l],r)}return r};var ce={};Object.defineProperty(ce,"__esModule",{value:!0}),ce.default=void 0,ce.default=function(e,t){return Math.sqrt(e*e+t*t)};var st={};Object.defineProperty(st,"__esModule",{value:!0}),st.default=function(e,t){e.__set||(e.__set={});var n=function(o){typeof e[o]!="function"&&o!=="__set"&&Object.defineProperty(e,o,{get:function(){return o in e.__set?e.__set[o]:e.__set[o]=t[o]},set:function(i){e.__set[o]=i},configurable:!0})};for(var r in t)n(r);return e};var w={};function Ut(e){return e instanceof B.default.Event||e instanceof B.default.Touch}function Xe(e,t,n){return e=e||"page",(n=n||{}).x=t[e+"X"],n.y=t[e+"Y"],n}function Xn(e,t){return t=t||{x:0,y:0},q.default.isOperaMobile&&Ut(e)?(Xe("screen",e,t),t.x+=window.scrollX,t.y+=window.scrollY):Xe("page",e,t),t}function Bn(e,t){return t=t||{},q.default.isOperaMobile&&Ut(e)?Xe("screen",e,t):Xe("client",e,t),t}function lt(e){var t=[];return v.default.array(e)?(t[0]=e[0],t[1]=e[1]):e.type==="touchend"?e.touches.length===1?(t[0]=e.touches[0],t[1]=e.changedTouches[0]):e.touches.length===0&&(t[0]=e.changedTouches[0],t[1]=e.changedTouches[1]):(t[0]=e.touches[0],t[1]=e.touches[1]),t}function Yn(e){for(var t={pageX:0,pageY:0,clientX:0,clientY:0,screenX:0,screenY:0},n=0;n<e.length;n++){var r=e[n];for(var o in t)t[o]+=r[o]}for(var i in t)t[i]/=e.length;return t}Object.defineProperty(w,"__esModule",{value:!0}),w.coordsToEvent=function(e){return{coords:e,get page(){return this.coords.page},get client(){return this.coords.client},get timeStamp(){return this.coords.timeStamp},get pageX(){return this.coords.page.x},get pageY(){return this.coords.page.y},get clientX(){return this.coords.client.x},get clientY(){return this.coords.client.y},get pointerId(){return this.coords.pointerId},get target(){return this.coords.target},get type(){return this.coords.type},get pointerType(){return this.coords.pointerType},get buttons(){return this.coords.buttons},preventDefault:function(){}}},w.copyCoords=function(e,t){e.page=e.page||{},e.page.x=t.page.x,e.page.y=t.page.y,e.client=e.client||{},e.client.x=t.client.x,e.client.y=t.client.y,e.timeStamp=t.timeStamp},w.getClientXY=Bn,w.getEventTargets=function(e){var t=v.default.func(e.composedPath)?e.composedPath():e.path;return[O.getActualElement(t?t[0]:e.target),O.getActualElement(e.currentTarget)]},w.getPageXY=Xn,w.getPointerId=function(e){return v.default.number(e.pointerId)?e.pointerId:e.identifier},w.getPointerType=function(e){return v.default.string(e.pointerType)?e.pointerType:v.default.number(e.pointerType)?[void 0,void 0,"touch","pen","mouse"][e.pointerType]:/touch/.test(e.type||"")||e instanceof B.default.Touch?"touch":"mouse"},w.getTouchPair=lt,w.getXY=Xe,w.isNativePointer=Ut,w.newCoords=function(){return{page:{x:0,y:0},client:{x:0,y:0},timeStamp:0}},w.pointerAverage=Yn,Object.defineProperty(w,"pointerExtend",{enumerable:!0,get:function(){return st.default}}),w.setCoordDeltas=function(e,t,n){e.page.x=n.page.x-t.page.x,e.page.y=n.page.y-t.page.y,e.client.x=n.client.x-t.client.x,e.client.y=n.client.y-t.client.y,e.timeStamp=n.timeStamp-t.timeStamp},w.setCoordVelocity=function(e,t){var n=Math.max(t.timeStamp/1e3,.001);e.page.x=t.page.x/n,e.page.y=t.page.y/n,e.client.x=t.client.x/n,e.client.y=t.client.y/n,e.timeStamp=n},w.setCoords=function(e,t,n){var r=t.length>1?Yn(t):t[0];Xn(r,e.page),Bn(r,e.client),e.timeStamp=n},w.setZeroCoords=function(e){e.page.x=0,e.page.y=0,e.client.x=0,e.client.y=0},w.touchAngle=function(e,t){var n=t+"X",r=t+"Y",o=lt(e),i=o[1][n]-o[0][n],l=o[1][r]-o[0][r];return 180*Math.atan2(l,i)/Math.PI},w.touchBBox=function(e){if(!e.length)return null;var t=lt(e),n=Math.min(t[0].pageX,t[1].pageX),r=Math.min(t[0].pageY,t[1].pageY),o=Math.max(t[0].pageX,t[1].pageX),i=Math.max(t[0].pageY,t[1].pageY);return{x:n,y:r,left:n,top:r,right:o,bottom:i,width:o-n,height:i-r}},w.touchDistance=function(e,t){var n=t+"X",r=t+"Y",o=lt(e),i=o[0][n]-o[1][n],l=o[0][r]-o[1][r];return(0,ce.default)(i,l)};var je={};function Qr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ln(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(je,"__esModule",{value:!0}),je.BaseEvent=void 0;var Wn=function(){function e(r){(function(o,i){if(!(o instanceof i))throw new TypeError("Cannot call a class as a function")})(this,e),Ln(this,"immediatePropagationStopped",!1),Ln(this,"propagationStopped",!1),this._interaction=r}var t,n;return t=e,(n=[{key:"preventDefault",value:function(){}},{key:"stopPropagation",value:function(){this.propagationStopped=!0}},{key:"stopImmediatePropagation",value:function(){this.immediatePropagationStopped=this.propagationStopped=!0}}])&&Qr(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();je.BaseEvent=Wn,Object.defineProperty(Wn.prototype,"interaction",{get:function(){return this._interaction._proxy},set:function(){}});var k={};Object.defineProperty(k,"__esModule",{value:!0}),k.remove=k.merge=k.from=k.findIndex=k.find=k.contains=void 0,k.contains=function(e,t){return e.indexOf(t)!==-1},k.remove=function(e,t){return e.splice(e.indexOf(t),1)};var Nn=function(e,t){for(var n=0;n<t.length;n++){var r=t[n];e.push(r)}return e};k.merge=Nn,k.from=function(e){return Nn([],e)};var Un=function(e,t){for(var n=0;n<e.length;n++)if(t(e[n],n,e))return n;return-1};k.findIndex=Un,k.find=function(e,t){return e[Un(e,t)]};var re={};function Vt(e){return Vt=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Vt(e)}function eo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qt(e,t){return qt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(n,r){return n.__proto__=r,n},qt(e,t)}function to(e,t){if(t&&(Vt(t)==="object"||typeof t=="function"))return t;if(t!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return ge(e)}function ge(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ut(e){return ut=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},ut(e)}function Me(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(re,"__esModule",{value:!0}),re.DropEvent=void 0;var no=function(e){(function(a,s){if(typeof s!="function"&&s!==null)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(s&&s.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),Object.defineProperty(a,"prototype",{writable:!1}),s&&qt(a,s)})(l,e);var t,n,r,o,i=(r=l,o=function(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}(),function(){var a,s=ut(r);if(o){var u=ut(this).constructor;a=Reflect.construct(s,arguments,u)}else a=s.apply(this,arguments);return to(this,a)});function l(a,s,u){var c;(function(d,g){if(!(d instanceof g))throw new TypeError("Cannot call a class as a function")})(this,l),Me(ge(c=i.call(this,s._interaction)),"dropzone",void 0),Me(ge(c),"dragEvent",void 0),Me(ge(c),"relatedTarget",void 0),Me(ge(c),"draggable",void 0),Me(ge(c),"propagationStopped",!1),Me(ge(c),"immediatePropagationStopped",!1);var f=u==="dragleave"?a.prev:a.cur,p=f.element,h=f.dropzone;return c.type=u,c.target=p,c.currentTarget=p,c.dropzone=h,c.dragEvent=s,c.relatedTarget=s.target,c.draggable=s.interactable,c.timeStamp=s.timeStamp,c}return t=l,(n=[{key:"reject",value:function(){var a=this,s=this._interaction.dropState;if(this.type==="dropactivate"||this.dropzone&&s.cur.dropzone===this.dropzone&&s.cur.element===this.target)if(s.prev.dropzone=this.dropzone,s.prev.element=this.target,s.rejected=!0,s.events.enter=null,this.stopImmediatePropagation(),this.type==="dropactivate"){var u=s.activeDrops,c=k.findIndex(u,function(p){var h=p.dropzone,d=p.element;return h===a.dropzone&&d===a.target});s.activeDrops.splice(c,1);var f=new l(s,this.dragEvent,"dropdeactivate");f.dropzone=this.dropzone,f.target=this.target,this.dropzone.fire(f)}else this.dropzone.fire(new l(s,this.dragEvent,"dragleave"))}},{key:"preventDefault",value:function(){}},{key:"stopPropagation",value:function(){this.propagationStopped=!0}},{key:"stopImmediatePropagation",value:function(){this.immediatePropagationStopped=this.propagationStopped=!0}}])&&eo(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),l}(je.BaseEvent);re.DropEvent=no;var ct={};function Vn(e,t){for(var n=0;n<e.slice().length;n++){var r=e.slice()[n],o=r.dropzone,i=r.element;t.dropzone=o,t.target=i,o.fire(t),t.propagationStopped=t.immediatePropagationStopped=!1}}function $t(e,t){for(var n=function(i,l){for(var a=i.interactables,s=[],u=0;u<a.list.length;u++){var c=a.list[u];if(c.options.drop.enabled){var f=c.options.drop.accept;if(!(v.default.element(f)&&f!==l||v.default.string(f)&&!O.matchesSelector(l,f)||v.default.func(f)&&!f({dropzone:c,draggableElement:l})))for(var p=v.default.string(c.target)?c._context.querySelectorAll(c.target):v.default.array(c.target)?c.target:[c.target],h=0;h<p.length;h++){var d=p[h];d!==l&&s.push({dropzone:c,element:d,rect:c.getRect(d)})}}}return s}(e,t),r=0;r<n.length;r++){var o=n[r];o.rect=o.dropzone.getRect(o.element)}return n}function qn(e,t,n){for(var r=e.dropState,o=e.interactable,i=e.element,l=[],a=0;a<r.activeDrops.length;a++){var s=r.activeDrops[a],u=s.dropzone,c=s.element,f=s.rect;l.push(u.dropCheck(t,n,o,i,c,f)?c:null)}var p=O.indexOfDeepestElement(l);return r.activeDrops[p]||null}function Gt(e,t,n){var r=e.dropState,o={enter:null,leave:null,activate:null,deactivate:null,move:null,drop:null};return n.type==="dragstart"&&(o.activate=new re.DropEvent(r,n,"dropactivate"),o.activate.target=null,o.activate.dropzone=null),n.type==="dragend"&&(o.deactivate=new re.DropEvent(r,n,"dropdeactivate"),o.deactivate.target=null,o.deactivate.dropzone=null),r.rejected||(r.cur.element!==r.prev.element&&(r.prev.dropzone&&(o.leave=new re.DropEvent(r,n,"dragleave"),n.dragLeave=o.leave.target=r.prev.element,n.prevDropzone=o.leave.dropzone=r.prev.dropzone),r.cur.dropzone&&(o.enter=new re.DropEvent(r,n,"dragenter"),n.dragEnter=r.cur.element,n.dropzone=r.cur.dropzone)),n.type==="dragend"&&r.cur.dropzone&&(o.drop=new re.DropEvent(r,n,"drop"),n.dropzone=r.cur.dropzone,n.relatedTarget=r.cur.element),n.type==="dragmove"&&r.cur.dropzone&&(o.move=new re.DropEvent(r,n,"dropmove"),o.move.dragmove=n,n.dropzone=r.cur.dropzone)),o}function Ht(e,t){var n=e.dropState,r=n.activeDrops,o=n.cur,i=n.prev;t.leave&&i.dropzone.fire(t.leave),t.enter&&o.dropzone.fire(t.enter),t.move&&o.dropzone.fire(t.move),t.drop&&o.dropzone.fire(t.drop),t.deactivate&&Vn(r,t.deactivate),n.prev.dropzone=o.dropzone,n.prev.element=o.element}function $n(e,t){var n=e.interaction,r=e.iEvent,o=e.event;if(r.type==="dragmove"||r.type==="dragend"){var i=n.dropState;t.dynamicDrop&&(i.activeDrops=$t(t,n.element));var l=r,a=qn(n,l,o);i.rejected=i.rejected&&!!a&&a.dropzone===i.cur.dropzone&&a.element===i.cur.element,i.cur.dropzone=a&&a.dropzone,i.cur.element=a&&a.element,i.events=Gt(n,0,l)}}Object.defineProperty(ct,"__esModule",{value:!0}),ct.default=void 0;var Gn={id:"actions/drop",install:function(e){var t=e.actions,n=e.interactStatic,r=e.Interactable,o=e.defaults;e.usePlugin(Fe.default),r.prototype.dropzone=function(i){return function(l,a){if(v.default.object(a)){if(l.options.drop.enabled=a.enabled!==!1,a.listeners){var s=(0,Te.default)(a.listeners),u=Object.keys(s).reduce(function(c,f){return c[/^(enter|leave)/.test(f)?"drag".concat(f):/^(activate|deactivate|move)/.test(f)?"drop".concat(f):f]=s[f],c},{});l.off(l.options.drop.listeners),l.on(u),l.options.drop.listeners=u}return v.default.func(a.ondrop)&&l.on("drop",a.ondrop),v.default.func(a.ondropactivate)&&l.on("dropactivate",a.ondropactivate),v.default.func(a.ondropdeactivate)&&l.on("dropdeactivate",a.ondropdeactivate),v.default.func(a.ondragenter)&&l.on("dragenter",a.ondragenter),v.default.func(a.ondragleave)&&l.on("dragleave",a.ondragleave),v.default.func(a.ondropmove)&&l.on("dropmove",a.ondropmove),/^(pointer|center)$/.test(a.overlap)?l.options.drop.overlap=a.overlap:v.default.number(a.overlap)&&(l.options.drop.overlap=Math.max(Math.min(1,a.overlap),0)),"accept"in a&&(l.options.drop.accept=a.accept),"checker"in a&&(l.options.drop.checker=a.checker),l}return v.default.bool(a)?(l.options.drop.enabled=a,l):l.options.drop}(this,i)},r.prototype.dropCheck=function(i,l,a,s,u,c){return function(f,p,h,d,g,m,y){var b=!1;if(!(y=y||f.getRect(m)))return!!f.options.drop.checker&&f.options.drop.checker(p,h,b,f,m,d,g);var P=f.options.drop.overlap;if(P==="pointer"){var T=(0,he.default)(d,g,"drag"),M=w.getPageXY(p);M.x+=T.x,M.y+=T.y;var A=M.x>y.left&&M.x<y.right,j=M.y>y.top&&M.y<y.bottom;b=A&&j}var D=d.getRect(g);if(D&&P==="center"){var ee=D.left+D.width/2,ue=D.top+D.height/2;b=ee>=y.left&&ee<=y.right&&ue>=y.top&&ue<=y.bottom}return D&&v.default.number(P)&&(b=Math.max(0,Math.min(y.right,D.right)-Math.max(y.left,D.left))*Math.max(0,Math.min(y.bottom,D.bottom)-Math.max(y.top,D.top))/(D.width*D.height)>=P),f.options.drop.checker&&(b=f.options.drop.checker(p,h,b,f,m,d,g)),b}(this,i,l,a,s,u,c)},n.dynamicDrop=function(i){return v.default.bool(i)?(e.dynamicDrop=i,n):e.dynamicDrop},(0,_.default)(t.phaselessTypes,{dragenter:!0,dragleave:!0,dropactivate:!0,dropdeactivate:!0,dropmove:!0,drop:!0}),t.methodDict.drop="dropzone",e.dynamicDrop=!1,o.actions.drop=Gn.defaults},listeners:{"interactions:before-action-start":function(e){var t=e.interaction;t.prepared.name==="drag"&&(t.dropState={cur:{dropzone:null,element:null},prev:{dropzone:null,element:null},rejected:null,events:null,activeDrops:[]})},"interactions:after-action-start":function(e,t){var n=e.interaction,r=(e.event,e.iEvent);if(n.prepared.name==="drag"){var o=n.dropState;o.activeDrops=null,o.events=null,o.activeDrops=$t(t,n.element),o.events=Gt(n,0,r),o.events.activate&&(Vn(o.activeDrops,o.events.activate),t.fire("actions/drop:start",{interaction:n,dragEvent:r}))}},"interactions:action-move":$n,"interactions:after-action-move":function(e,t){var n=e.interaction,r=e.iEvent;n.prepared.name==="drag"&&(Ht(n,n.dropState.events),t.fire("actions/drop:move",{interaction:n,dragEvent:r}),n.dropState.events={})},"interactions:action-end":function(e,t){if(e.interaction.prepared.name==="drag"){var n=e.interaction,r=e.iEvent;$n(e,t),Ht(n,n.dropState.events),t.fire("actions/drop:end",{interaction:n,dragEvent:r})}},"interactions:stop":function(e){var t=e.interaction;if(t.prepared.name==="drag"){var n=t.dropState;n&&(n.activeDrops=null,n.events=null,n.cur.dropzone=null,n.cur.element=null,n.prev.dropzone=null,n.prev.element=null,n.rejected=!1)}}},getActiveDrops:$t,getDrop:qn,getDropEvents:Gt,fireDropEvents:Ht,defaults:{enabled:!1,accept:null,overlap:"pointer"}},ro=Gn;ct.default=ro;var ft={};function Kt(e){var t=e.interaction,n=e.iEvent,r=e.phase;if(t.prepared.name==="gesture"){var o=t.pointers.map(function(u){return u.pointer}),i=r==="start",l=r==="end",a=t.interactable.options.deltaSource;if(n.touches=[o[0],o[1]],i)n.distance=w.touchDistance(o,a),n.box=w.touchBBox(o),n.scale=1,n.ds=0,n.angle=w.touchAngle(o,a),n.da=0,t.gesture.startDistance=n.distance,t.gesture.startAngle=n.angle;else if(l){var s=t.prevEvent;n.distance=s.distance,n.box=s.box,n.scale=s.scale,n.ds=0,n.angle=s.angle,n.da=0}else n.distance=w.touchDistance(o,a),n.box=w.touchBBox(o),n.scale=n.distance/t.gesture.startDistance,n.angle=w.touchAngle(o,a),n.ds=n.scale-t.gesture.scale,n.da=n.angle-t.gesture.angle;t.gesture.distance=n.distance,t.gesture.angle=n.angle,v.default.number(n.scale)&&n.scale!==1/0&&!isNaN(n.scale)&&(t.gesture.scale=n.scale)}}Object.defineProperty(ft,"__esModule",{value:!0}),ft.default=void 0;var Zt={id:"actions/gesture",before:["actions/drag","actions/resize"],install:function(e){var t=e.actions,n=e.Interactable,r=e.defaults;n.prototype.gesturable=function(o){return v.default.object(o)?(this.options.gesture.enabled=o.enabled!==!1,this.setPerAction("gesture",o),this.setOnEvents("gesture",o),this):v.default.bool(o)?(this.options.gesture.enabled=o,this):this.options.gesture},t.map.gesture=Zt,t.methodDict.gesture="gesturable",r.actions.gesture=Zt.defaults},listeners:{"interactions:action-start":Kt,"interactions:action-move":Kt,"interactions:action-end":Kt,"interactions:new":function(e){e.interaction.gesture={angle:0,distance:0,scale:1,startAngle:0,startDistance:0}},"auto-start:check":function(e){if(!(e.interaction.pointers.length<2)){var t=e.interactable.options.gesture;if(t&&t.enabled)return e.action={name:"gesture"},!1}}},defaults:{},getCursor:function(){return""}},oo=Zt;ft.default=oo;var dt={};function io(e,t,n,r,o,i,l){if(!t)return!1;if(t===!0){var a=v.default.number(i.width)?i.width:i.right-i.left,s=v.default.number(i.height)?i.height:i.bottom-i.top;if(l=Math.min(l,Math.abs((e==="left"||e==="right"?a:s)/2)),a<0&&(e==="left"?e="right":e==="right"&&(e="left")),s<0&&(e==="top"?e="bottom":e==="bottom"&&(e="top")),e==="left"){var u=a>=0?i.left:i.right;return n.x<u+l}if(e==="top"){var c=s>=0?i.top:i.bottom;return n.y<c+l}if(e==="right")return n.x>(a>=0?i.right:i.left)-l;if(e==="bottom")return n.y>(s>=0?i.bottom:i.top)-l}return!!v.default.element(r)&&(v.default.element(t)?t===r:O.matchesUpTo(r,t,o))}function Hn(e){var t=e.iEvent,n=e.interaction;if(n.prepared.name==="resize"&&n.resizeAxes){var r=t;n.interactable.options.resize.square?(n.resizeAxes==="y"?r.delta.x=r.delta.y:r.delta.y=r.delta.x,r.axes="xy"):(r.axes=n.resizeAxes,n.resizeAxes==="x"?r.delta.y=0:n.resizeAxes==="y"&&(r.delta.x=0))}}Object.defineProperty(dt,"__esModule",{value:!0}),dt.default=void 0;var oe={id:"actions/resize",before:["actions/drag"],install:function(e){var t=e.actions,n=e.browser,r=e.Interactable,o=e.defaults;oe.cursors=function(i){return i.isIe9?{x:"e-resize",y:"s-resize",xy:"se-resize",top:"n-resize",left:"w-resize",bottom:"s-resize",right:"e-resize",topleft:"se-resize",bottomright:"se-resize",topright:"ne-resize",bottomleft:"ne-resize"}:{x:"ew-resize",y:"ns-resize",xy:"nwse-resize",top:"ns-resize",left:"ew-resize",bottom:"ns-resize",right:"ew-resize",topleft:"nwse-resize",bottomright:"nwse-resize",topright:"nesw-resize",bottomleft:"nesw-resize"}}(n),oe.defaultMargin=n.supportsTouch||n.supportsPointerEvent?20:10,r.prototype.resizable=function(i){return function(l,a,s){return v.default.object(a)?(l.options.resize.enabled=a.enabled!==!1,l.setPerAction("resize",a),l.setOnEvents("resize",a),v.default.string(a.axis)&&/^x$|^y$|^xy$/.test(a.axis)?l.options.resize.axis=a.axis:a.axis===null&&(l.options.resize.axis=s.defaults.actions.resize.axis),v.default.bool(a.preserveAspectRatio)?l.options.resize.preserveAspectRatio=a.preserveAspectRatio:v.default.bool(a.square)&&(l.options.resize.square=a.square),l):v.default.bool(a)?(l.options.resize.enabled=a,l):l.options.resize}(this,i,e)},t.map.resize=oe,t.methodDict.resize="resizable",o.actions.resize=oe.defaults},listeners:{"interactions:new":function(e){e.interaction.resizeAxes="xy"},"interactions:action-start":function(e){(function(t){var n=t.iEvent,r=t.interaction;if(r.prepared.name==="resize"&&r.prepared.edges){var o=n,i=r.rect;r._rects={start:(0,_.default)({},i),corrected:(0,_.default)({},i),previous:(0,_.default)({},i),delta:{left:0,right:0,width:0,top:0,bottom:0,height:0}},o.edges=r.prepared.edges,o.rect=r._rects.corrected,o.deltaRect=r._rects.delta}})(e),Hn(e)},"interactions:action-move":function(e){(function(t){var n=t.iEvent,r=t.interaction;if(r.prepared.name==="resize"&&r.prepared.edges){var o=n,i=r.interactable.options.resize.invert,l=i==="reposition"||i==="negate",a=r.rect,s=r._rects,u=s.start,c=s.corrected,f=s.delta,p=s.previous;if((0,_.default)(p,c),l){if((0,_.default)(c,a),i==="reposition"){if(c.top>c.bottom){var h=c.top;c.top=c.bottom,c.bottom=h}if(c.left>c.right){var d=c.left;c.left=c.right,c.right=d}}}else c.top=Math.min(a.top,u.bottom),c.bottom=Math.max(a.bottom,u.top),c.left=Math.min(a.left,u.right),c.right=Math.max(a.right,u.left);for(var g in c.width=c.right-c.left,c.height=c.bottom-c.top,c)f[g]=c[g]-p[g];o.edges=r.prepared.edges,o.rect=c,o.deltaRect=f}})(e),Hn(e)},"interactions:action-end":function(e){var t=e.iEvent,n=e.interaction;if(n.prepared.name==="resize"&&n.prepared.edges){var r=t;r.edges=n.prepared.edges,r.rect=n._rects.corrected,r.deltaRect=n._rects.delta}},"auto-start:check":function(e){var t=e.interaction,n=e.interactable,r=e.element,o=e.rect,i=e.buttons;if(o){var l=(0,_.default)({},t.coords.cur.page),a=n.options.resize;if(a&&a.enabled&&(!t.pointerIsDown||!/mouse|pointer/.test(t.pointerType)||(i&a.mouseButtons)!=0)){if(v.default.object(a.edges)){var s={left:!1,right:!1,top:!1,bottom:!1};for(var u in s)s[u]=io(u,a.edges[u],l,t._latestPointer.eventTarget,r,o,a.margin||oe.defaultMargin);s.left=s.left&&!s.right,s.top=s.top&&!s.bottom,(s.left||s.right||s.top||s.bottom)&&(e.action={name:"resize",edges:s})}else{var c=a.axis!=="y"&&l.x>o.right-oe.defaultMargin,f=a.axis!=="x"&&l.y>o.bottom-oe.defaultMargin;(c||f)&&(e.action={name:"resize",axes:(c?"x":"")+(f?"y":"")})}return!e.action&&void 0}}}},defaults:{square:!1,preserveAspectRatio:!1,axis:"xy",margin:NaN,edges:null,invert:"none"},cursors:null,getCursor:function(e){var t=e.edges,n=e.axis,r=e.name,o=oe.cursors,i=null;if(n)i=o[r+n];else if(t){for(var l="",a=["top","bottom","left","right"],s=0;s<a.length;s++){var u=a[s];t[u]&&(l+=u)}i=o[l]}return i},defaultMargin:null},ao=oe;dt.default=ao;var Be={};Object.defineProperty(Be,"__esModule",{value:!0}),Be.default=void 0;var so={id:"actions",install:function(e){e.usePlugin(ft.default),e.usePlugin(dt.default),e.usePlugin(Fe.default),e.usePlugin(ct.default)}};Be.default=so;var te={};Object.defineProperty(te,"__esModule",{value:!0}),te.default=void 0;var ie,ye,Kn=0,lo={request:function(e){return ie(e)},cancel:function(e){return ye(e)},init:function(e){if(ie=e.requestAnimationFrame,ye=e.cancelAnimationFrame,!ie)for(var t=["ms","moz","webkit","o"],n=0;n<t.length;n++){var r=t[n];ie=e["".concat(r,"RequestAnimationFrame")],ye=e["".concat(r,"CancelAnimationFrame")]||e["".concat(r,"CancelRequestAnimationFrame")]}ie=ie&&ie.bind(e),ye=ye&&ye.bind(e),ie||(ie=function(o){var i=Date.now(),l=Math.max(0,16-(i-Kn)),a=e.setTimeout(function(){o(i+l)},l);return Kn=i+l,a},ye=function(o){return clearTimeout(o)})}};te.default=lo;var ae={};Object.defineProperty(ae,"__esModule",{value:!0}),ae.default=void 0,ae.getContainer=pt,ae.getScroll=Ye,ae.getScrollSize=function(e){return v.default.window(e)&&(e=window.document.body),{x:e.scrollWidth,y:e.scrollHeight}},ae.getScrollSizeDelta=function(e,t){var n=e.interaction,r=e.element,o=n&&n.interactable.options[n.prepared.name].autoScroll;if(!o||!o.enabled)return t(),{x:0,y:0};var i=pt(o.container,n.interactable,r),l=Ye(i);t();var a=Ye(i);return{x:a.x-l.x,y:a.y-l.y}};var E={defaults:{enabled:!1,margin:60,container:null,speed:300},now:Date.now,interaction:null,i:0,x:0,y:0,isScrolling:!1,prevTime:0,margin:0,speed:0,start:function(e){E.isScrolling=!0,te.default.cancel(E.i),e.autoScroll=E,E.interaction=e,E.prevTime=E.now(),E.i=te.default.request(E.scroll)},stop:function(){E.isScrolling=!1,E.interaction&&(E.interaction.autoScroll=null),te.default.cancel(E.i)},scroll:function(){var e=E.interaction,t=e.interactable,n=e.element,r=e.prepared.name,o=t.options[r].autoScroll,i=pt(o.container,t,n),l=E.now(),a=(l-E.prevTime)/1e3,s=o.speed*a;if(s>=1){var u={x:E.x*s,y:E.y*s};if(u.x||u.y){var c=Ye(i);v.default.window(i)?i.scrollBy(u.x,u.y):i&&(i.scrollLeft+=u.x,i.scrollTop+=u.y);var f=Ye(i),p={x:f.x-c.x,y:f.y-c.y};(p.x||p.y)&&t.fire({type:"autoscroll",target:n,interactable:t,delta:p,interaction:e,container:i})}E.prevTime=l}E.isScrolling&&(te.default.cancel(E.i),E.i=te.default.request(E.scroll))},check:function(e,t){var n;return(n=e.options[t].autoScroll)==null?void 0:n.enabled},onInteractionMove:function(e){var t=e.interaction,n=e.pointer;if(t.interacting()&&E.check(t.interactable,t.prepared.name))if(t.simulation)E.x=E.y=0;else{var r,o,i,l,a=t.interactable,s=t.element,u=t.prepared.name,c=a.options[u].autoScroll,f=pt(c.container,a,s);if(v.default.window(f))l=n.clientX<E.margin,r=n.clientY<E.margin,o=n.clientX>f.innerWidth-E.margin,i=n.clientY>f.innerHeight-E.margin;else{var p=O.getElementClientRect(f);l=n.clientX<p.left+E.margin,r=n.clientY<p.top+E.margin,o=n.clientX>p.right-E.margin,i=n.clientY>p.bottom-E.margin}E.x=o?1:l?-1:0,E.y=i?1:r?-1:0,E.isScrolling||(E.margin=c.margin,E.speed=c.speed,E.start(t))}}};function pt(e,t,n){return(v.default.string(e)?(0,z.getStringOptionResult)(e,t,n):e)||(0,x.getWindow)(n)}function Ye(e){return v.default.window(e)&&(e=window.document.body),{x:e.scrollLeft,y:e.scrollTop}}var uo={id:"auto-scroll",install:function(e){var t=e.defaults,n=e.actions;e.autoScroll=E,E.now=function(){return e.now()},n.phaselessTypes.autoscroll=!0,t.perAction.autoScroll=E.defaults},listeners:{"interactions:new":function(e){e.interaction.autoScroll=null},"interactions:destroy":function(e){e.interaction.autoScroll=null,E.stop(),E.interaction&&(E.interaction=null)},"interactions:stop":E.stop,"interactions:action-move":function(e){return E.onInteractionMove(e)}}},co=uo;ae.default=co;var H={};Object.defineProperty(H,"__esModule",{value:!0}),H.copyAction=function(e,t){return e.name=t.name,e.axis=t.axis,e.edges=t.edges,e},H.sign=void 0,H.warnOnce=function(e,t){var n=!1;return function(){return n||(x.window.console.warn(t),n=!0),e.apply(this,arguments)}},H.sign=function(e){return e>=0?1:-1};var vt={};function fo(e){return v.default.bool(e)?(this.options.styleCursor=e,this):e===null?(delete this.options.styleCursor,this):this.options.styleCursor}function po(e){return v.default.func(e)?(this.options.actionChecker=e,this):e===null?(delete this.options.actionChecker,this):this.options.actionChecker}Object.defineProperty(vt,"__esModule",{value:!0}),vt.default=void 0;var vo={id:"auto-start/interactableMethods",install:function(e){var t=e.Interactable;t.prototype.getAction=function(n,r,o,i){var l=function(a,s,u,c,f){var p=a.getRect(c),h={action:null,interactable:a,interaction:u,element:c,rect:p,buttons:s.buttons||{0:1,1:4,3:8,4:16}[s.button]};return f.fire("auto-start:check",h),h.action}(this,r,o,i,e);return this.options.actionChecker?this.options.actionChecker(n,r,l,this,i,o):l},t.prototype.ignoreFrom=(0,H.warnOnce)(function(n){return this._backCompatOption("ignoreFrom",n)},"Interactable.ignoreFrom() has been deprecated. Use Interactble.draggable({ignoreFrom: newValue})."),t.prototype.allowFrom=(0,H.warnOnce)(function(n){return this._backCompatOption("allowFrom",n)},"Interactable.allowFrom() has been deprecated. Use Interactble.draggable({allowFrom: newValue})."),t.prototype.actionChecker=po,t.prototype.styleCursor=fo}};vt.default=vo;var ke={};function Zn(e,t,n,r,o){return t.testIgnoreAllow(t.options[e.name],n,r)&&t.options[e.name].enabled&&ht(t,n,e,o)?e:null}function ho(e,t,n,r,o,i,l){for(var a=0,s=r.length;a<s;a++){var u=r[a],c=o[a],f=u.getAction(t,n,e,c);if(f){var p=Zn(f,u,c,i,l);if(p)return{action:p,interactable:u,element:c}}}return{action:null,interactable:null,element:null}}function Jn(e,t,n,r,o){var i=[],l=[],a=r;function s(c){i.push(c),l.push(a)}for(;v.default.element(a);){i=[],l=[],o.interactables.forEachMatch(a,s);var u=ho(e,t,n,i,l,r,o);if(u.action&&!u.interactable.options[u.action.name].manualStart)return u;a=O.parentNode(a)}return{action:null,interactable:null,element:null}}function Qn(e,t,n){var r=t.action,o=t.interactable,i=t.element;r=r||{name:null},e.interactable=o,e.element=i,(0,H.copyAction)(e.prepared,r),e.rect=o&&r.name?o.getRect(i):null,tr(e,n),n.fire("autoStart:prepared",{interaction:e})}function ht(e,t,n,r){var o=e.options,i=o[n.name].max,l=o[n.name].maxPerElement,a=r.autoStart.maxInteractions,s=0,u=0,c=0;if(!(i&&l&&a))return!1;for(var f=0;f<r.interactions.list.length;f++){var p=r.interactions.list[f],h=p.prepared.name;if(p.interacting()&&(++s>=a||p.interactable===e&&((u+=h===n.name?1:0)>=i||p.element===t&&(c++,h===n.name&&c>=l))))return!1}return a>0}function er(e,t){return v.default.number(e)?(t.autoStart.maxInteractions=e,this):t.autoStart.maxInteractions}function Jt(e,t,n){var r=n.autoStart.cursorElement;r&&r!==e&&(r.style.cursor=""),e.ownerDocument.documentElement.style.cursor=t,e.style.cursor=t,n.autoStart.cursorElement=t?e:null}function tr(e,t){var n=e.interactable,r=e.element,o=e.prepared;if(e.pointerType==="mouse"&&n&&n.options.styleCursor){var i="";if(o.name){var l=n.options[o.name].cursorChecker;i=v.default.func(l)?l(o,n,r,e._interacting):t.actions.map[o.name].getCursor(o)}Jt(e.element,i||"",t)}else t.autoStart.cursorElement&&Jt(t.autoStart.cursorElement,"",t)}Object.defineProperty(ke,"__esModule",{value:!0}),ke.default=void 0;var go={id:"auto-start/base",before:["actions"],install:function(e){var t=e.interactStatic,n=e.defaults;e.usePlugin(vt.default),n.base.actionChecker=null,n.base.styleCursor=!0,(0,_.default)(n.perAction,{manualStart:!1,max:1/0,maxPerElement:1,allowFrom:null,ignoreFrom:null,mouseButtons:1}),t.maxInteractions=function(r){return er(r,e)},e.autoStart={maxInteractions:1/0,withinInteractionLimit:ht,cursorElement:null}},listeners:{"interactions:down":function(e,t){var n=e.interaction,r=e.pointer,o=e.event,i=e.eventTarget;n.interacting()||Qn(n,Jn(n,r,o,i,t),t)},"interactions:move":function(e,t){(function(n,r){var o=n.interaction,i=n.pointer,l=n.event,a=n.eventTarget;o.pointerType!=="mouse"||o.pointerIsDown||o.interacting()||Qn(o,Jn(o,i,l,a,r),r)})(e,t),function(n,r){var o=n.interaction;if(o.pointerIsDown&&!o.interacting()&&o.pointerWasMoved&&o.prepared.name){r.fire("autoStart:before-start",n);var i=o.interactable,l=o.prepared.name;l&&i&&(i.options[l].manualStart||!ht(i,o.element,o.prepared,r)?o.stop():(o.start(o.prepared,i,o.element),tr(o,r)))}}(e,t)},"interactions:stop":function(e,t){var n=e.interaction,r=n.interactable;r&&r.options.styleCursor&&Jt(n.element,"",t)}},maxInteractions:er,withinInteractionLimit:ht,validateAction:Zn},yo=go;ke.default=yo;var gt={};Object.defineProperty(gt,"__esModule",{value:!0}),gt.default=void 0;var mo={id:"auto-start/dragAxis",listeners:{"autoStart:before-start":function(e,t){var n=e.interaction,r=e.eventTarget,o=e.dx,i=e.dy;if(n.prepared.name==="drag"){var l=Math.abs(o),a=Math.abs(i),s=n.interactable.options.drag,u=s.startAxis,c=l>a?"x":l<a?"y":"xy";if(n.prepared.axis=s.lockAxis==="start"?c[0]:s.lockAxis,c!=="xy"&&u!=="xy"&&u!==c){n.prepared.name=null;for(var f=r,p=function(d){if(d!==n.interactable){var g=n.interactable.options.drag;if(!g.manualStart&&d.testIgnoreAllow(g,f,r)){var m=d.getAction(n.downPointer,n.downEvent,n,f);if(m&&m.name==="drag"&&function(y,b){if(!b)return!1;var P=b.options.drag.startAxis;return y==="xy"||P==="xy"||P===y}(c,d)&&ke.default.validateAction(m,d,f,r,t))return d}}};v.default.element(f);){var h=t.interactables.forEachMatch(f,p);if(h){n.prepared.name="drag",n.interactable=h,n.element=f;break}f=(0,O.parentNode)(f)}}}}}};gt.default=mo;var yt={};function Qt(e){var t=e.prepared&&e.prepared.name;if(!t)return null;var n=e.interactable.options;return n[t].hold||n[t].delay}Object.defineProperty(yt,"__esModule",{value:!0}),yt.default=void 0;var bo={id:"auto-start/hold",install:function(e){var t=e.defaults;e.usePlugin(ke.default),t.perAction.hold=0,t.perAction.delay=0},listeners:{"interactions:new":function(e){e.interaction.autoStartHoldTimer=null},"autoStart:prepared":function(e){var t=e.interaction,n=Qt(t);n>0&&(t.autoStartHoldTimer=setTimeout(function(){t.start(t.prepared,t.interactable,t.element)},n))},"interactions:move":function(e){var t=e.interaction,n=e.duplicate;t.autoStartHoldTimer&&t.pointerWasMoved&&!n&&(clearTimeout(t.autoStartHoldTimer),t.autoStartHoldTimer=null)},"autoStart:before-start":function(e){var t=e.interaction;Qt(t)>0&&(t.prepared.name=null)}},getHoldDuration:Qt},xo=bo;yt.default=xo;var Le={};Object.defineProperty(Le,"__esModule",{value:!0}),Le.default=void 0;var wo={id:"auto-start",install:function(e){e.usePlugin(ke.default),e.usePlugin(yt.default),e.usePlugin(gt.default)}};Le.default=wo;var me={};function _o(e){return/^(always|never|auto)$/.test(e)?(this.options.preventDefault=e,this):v.default.bool(e)?(this.options.preventDefault=e?"always":"never",this):this.options.preventDefault}function Po(e){var t=e.interaction,n=e.event;t.interactable&&t.interactable.checkAndPreventDefault(n)}function nr(e){var t=e.Interactable;t.prototype.preventDefault=_o,t.prototype.checkAndPreventDefault=function(n){return function(r,o,i){var l=r.options.preventDefault;if(l!=="never")if(l!=="always"){if(o.events.supportsPassive&&/^touch(start|move)$/.test(i.type)){var a=(0,x.getWindow)(i.target).document,s=o.getDocOptions(a);if(!s||!s.events||s.events.passive!==!1)return}/^(mouse|pointer|touch)*(down|start)/i.test(i.type)||v.default.element(i.target)&&(0,O.matchesSelector)(i.target,"input,select,textarea,[contenteditable=true],[contenteditable=true] *")||i.preventDefault()}else i.preventDefault()}(this,e,n)},e.interactions.docEvents.push({type:"dragstart",listener:function(n){for(var r=0;r<e.interactions.list.length;r++){var o=e.interactions.list[r];if(o.element&&(o.element===n.target||(0,O.nodeContains)(o.element,n.target)))return void o.interactable.checkAndPreventDefault(n)}}})}Object.defineProperty(me,"__esModule",{value:!0}),me.default=void 0,me.install=nr;var Oo={id:"core/interactablePreventDefault",install:nr,listeners:["down","move","up","cancel"].reduce(function(e,t){return e["interactions:".concat(t)]=Po,e},{})};me.default=Oo;var en={};Object.defineProperty(en,"__esModule",{value:!0}),en.default=void 0,en.default={};var We,mt={};Object.defineProperty(mt,"__esModule",{value:!0}),mt.default=void 0,function(e){e.touchAction="touchAction",e.boxSizing="boxSizing",e.noListeners="noListeners"}(We||(We={})),We.touchAction,We.boxSizing,We.noListeners;var Eo={id:"dev-tools",install:function(){}};mt.default=Eo;var be={};Object.defineProperty(be,"__esModule",{value:!0}),be.default=function e(t){var n={};for(var r in t){var o=t[r];v.default.plainObject(o)?n[r]=e(o):v.default.array(o)?n[r]=k.from(o):n[r]=o}return n};var xe={};function rr(e,t){return function(n){if(Array.isArray(n))return n}(e)||function(n,r){var o=n==null?null:typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(o!=null){var i,l,a=[],s=!0,u=!1;try{for(o=o.call(n);!(s=(i=o.next()).done)&&(a.push(i.value),!r||a.length!==r);s=!0);}catch(c){u=!0,l=c}finally{try{s||o.return==null||o.return()}finally{if(u)throw l}}return a}}(e,t)||function(n,r){if(n){if(typeof n=="string")return or(n,r);var o=Object.prototype.toString.call(n).slice(8,-1);return o==="Object"&&n.constructor&&(o=n.constructor.name),o==="Map"||o==="Set"?Array.from(n):o==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?or(n,r):void 0}}(e,t)||function(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}()}function or(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function So(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function we(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(xe,"__esModule",{value:!0}),xe.default=void 0,xe.getRectOffset=ir;var To=function(){function e(r){(function(o,i){if(!(o instanceof i))throw new TypeError("Cannot call a class as a function")})(this,e),we(this,"states",[]),we(this,"startOffset",{left:0,right:0,top:0,bottom:0}),we(this,"startDelta",void 0),we(this,"result",void 0),we(this,"endResult",void 0),we(this,"edges",void 0),we(this,"interaction",void 0),this.interaction=r,this.result=bt()}var t,n;return t=e,(n=[{key:"start",value:function(r,o){var i=r.phase,l=this.interaction,a=function(u){var c=u.interactable.options[u.prepared.name],f=c.modifiers;return f&&f.length?f:["snap","snapSize","snapEdges","restrict","restrictEdges","restrictSize"].map(function(p){var h=c[p];return h&&h.enabled&&{options:h,methods:h._methods}}).filter(function(p){return!!p})}(l);this.prepareStates(a),this.edges=(0,_.default)({},l.edges),this.startOffset=ir(l.rect,o),this.startDelta={x:0,y:0};var s=this.fillArg({phase:i,pageCoords:o,preEnd:!1});return this.result=bt(),this.startAll(s),this.result=this.setAll(s)}},{key:"fillArg",value:function(r){var o=this.interaction;return r.interaction=o,r.interactable=o.interactable,r.element=o.element,r.rect=r.rect||o.rect,r.edges=this.edges,r.startOffset=this.startOffset,r}},{key:"startAll",value:function(r){for(var o=0;o<this.states.length;o++){var i=this.states[o];i.methods.start&&(r.state=i,i.methods.start(r))}}},{key:"setAll",value:function(r){var o=r.phase,i=r.preEnd,l=r.skipModifiers,a=r.rect;r.coords=(0,_.default)({},r.pageCoords),r.rect=(0,_.default)({},a);for(var s=l?this.states.slice(l):this.states,u=bt(r.coords,r.rect),c=0;c<s.length;c++){var f,p=s[c],h=p.options,d=(0,_.default)({},r.coords),g=null;(f=p.methods)!=null&&f.set&&this.shouldDo(h,i,o)&&(r.state=p,g=p.methods.set(r),z.addEdges(this.interaction.edges,r.rect,{x:r.coords.x-d.x,y:r.coords.y-d.y})),u.eventProps.push(g)}u.delta.x=r.coords.x-r.pageCoords.x,u.delta.y=r.coords.y-r.pageCoords.y,u.rectDelta.left=r.rect.left-a.left,u.rectDelta.right=r.rect.right-a.right,u.rectDelta.top=r.rect.top-a.top,u.rectDelta.bottom=r.rect.bottom-a.bottom;var m=this.result.coords,y=this.result.rect;if(m&&y){var b=u.rect.left!==y.left||u.rect.right!==y.right||u.rect.top!==y.top||u.rect.bottom!==y.bottom;u.changed=b||m.x!==u.coords.x||m.y!==u.coords.y}return u}},{key:"applyToInteraction",value:function(r){var o=this.interaction,i=r.phase,l=o.coords.cur,a=o.coords.start,s=this.result,u=this.startDelta,c=s.delta;i==="start"&&(0,_.default)(this.startDelta,s.delta);for(var f=0;f<[[a,u],[l,c]].length;f++){var p=rr([[a,u],[l,c]][f],2),h=p[0],d=p[1];h.page.x+=d.x,h.page.y+=d.y,h.client.x+=d.x,h.client.y+=d.y}var g=this.result.rectDelta,m=r.rect||o.rect;m.left+=g.left,m.right+=g.right,m.top+=g.top,m.bottom+=g.bottom,m.width=m.right-m.left,m.height=m.bottom-m.top}},{key:"setAndApply",value:function(r){var o=this.interaction,i=r.phase,l=r.preEnd,a=r.skipModifiers,s=this.setAll(this.fillArg({preEnd:l,phase:i,pageCoords:r.modifiedCoords||o.coords.cur.page}));if(this.result=s,!s.changed&&(!a||a<this.states.length)&&o.interacting())return!1;if(r.modifiedCoords){var u=o.coords.cur.page,c={x:r.modifiedCoords.x-u.x,y:r.modifiedCoords.y-u.y};s.coords.x+=c.x,s.coords.y+=c.y,s.delta.x+=c.x,s.delta.y+=c.y}this.applyToInteraction(r)}},{key:"beforeEnd",value:function(r){var o=r.interaction,i=r.event,l=this.states;if(l&&l.length){for(var a=!1,s=0;s<l.length;s++){var u=l[s];r.state=u;var c=u.options,f=u.methods,p=f.beforeEnd&&f.beforeEnd(r);if(p)return this.endResult=p,!1;a=a||!a&&this.shouldDo(c,!0,r.phase,!0)}a&&o.move({event:i,preEnd:!0})}}},{key:"stop",value:function(r){var o=r.interaction;if(this.states&&this.states.length){var i=(0,_.default)({states:this.states,interactable:o.interactable,element:o.element,rect:null},r);this.fillArg(i);for(var l=0;l<this.states.length;l++){var a=this.states[l];i.state=a,a.methods.stop&&a.methods.stop(i)}this.states=null,this.endResult=null}}},{key:"prepareStates",value:function(r){this.states=[];for(var o=0;o<r.length;o++){var i=r[o],l=i.options,a=i.methods,s=i.name;this.states.push({options:l,methods:a,index:o,name:s})}return this.states}},{key:"restoreInteractionCoords",value:function(r){var o=r.interaction,i=o.coords,l=o.rect,a=o.modification;if(a.result){for(var s=a.startDelta,u=a.result,c=u.delta,f=u.rectDelta,p=[[i.start,s],[i.cur,c]],h=0;h<p.length;h++){var d=rr(p[h],2),g=d[0],m=d[1];g.page.x-=m.x,g.page.y-=m.y,g.client.x-=m.x,g.client.y-=m.y}l.left-=f.left,l.right-=f.right,l.top-=f.top,l.bottom-=f.bottom}}},{key:"shouldDo",value:function(r,o,i,l){return!(!r||r.enabled===!1||l&&!r.endOnly||r.endOnly&&!o||i==="start"&&!r.setStart)}},{key:"copyFrom",value:function(r){this.startOffset=r.startOffset,this.startDelta=r.startDelta,this.edges=r.edges,this.states=r.states.map(function(o){return(0,be.default)(o)}),this.result=bt((0,_.default)({},r.result.coords),(0,_.default)({},r.result.rect))}},{key:"destroy",value:function(){for(var r in this)this[r]=null}}])&&So(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function bt(e,t){return{rect:t,coords:e,delta:{x:0,y:0},rectDelta:{left:0,right:0,top:0,bottom:0},eventProps:[],changed:!0}}function ir(e,t){return e?{left:t.x-e.left,top:t.y-e.top,right:e.right-t.x,bottom:e.bottom-t.y}:{left:0,top:0,right:0,bottom:0}}xe.default=To;var L={};function xt(e){var t=e.iEvent,n=e.interaction.modification.result;n&&(t.modifiers=n.eventProps)}Object.defineProperty(L,"__esModule",{value:!0}),L.addEventModifiers=xt,L.default=void 0,L.makeModifier=function(e,t){var n=e.defaults,r={start:e.start,set:e.set,beforeEnd:e.beforeEnd,stop:e.stop},o=function(i){var l=i||{};for(var a in l.enabled=l.enabled!==!1,n)a in l||(l[a]=n[a]);var s={options:l,methods:r,name:t,enable:function(){return l.enabled=!0,s},disable:function(){return l.enabled=!1,s}};return s};return t&&typeof t=="string"&&(o._defaults=n,o._methods=r),o};var jo={id:"modifiers/base",before:["actions"],install:function(e){e.defaults.perAction.modifiers=[]},listeners:{"interactions:new":function(e){var t=e.interaction;t.modification=new xe.default(t)},"interactions:before-action-start":function(e){var t=e.interaction.modification;t.start(e,e.interaction.coords.start.page),e.interaction.edges=t.edges,t.applyToInteraction(e)},"interactions:before-action-move":function(e){return e.interaction.modification.setAndApply(e)},"interactions:before-action-end":function(e){return e.interaction.modification.beforeEnd(e)},"interactions:action-start":xt,"interactions:action-move":xt,"interactions:action-end":xt,"interactions:after-action-start":function(e){return e.interaction.modification.restoreInteractionCoords(e)},"interactions:after-action-move":function(e){return e.interaction.modification.restoreInteractionCoords(e)},"interactions:stop":function(e){return e.interaction.modification.stop(e)}}},Mo=jo;L.default=Mo;var Ne={};Object.defineProperty(Ne,"__esModule",{value:!0}),Ne.defaults=void 0,Ne.defaults={base:{preventDefault:"auto",deltaSource:"page"},perAction:{enabled:!1,origin:{x:0,y:0}},actions:{}};var Ue={};function tn(e){return tn=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},tn(e)}function ko(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function nn(e,t){return nn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(n,r){return n.__proto__=r,n},nn(e,t)}function Io(e,t){if(t&&(tn(t)==="object"||typeof t=="function"))return t;if(t!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return I(e)}function I(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function wt(e){return wt=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},wt(e)}function C(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(Ue,"__esModule",{value:!0}),Ue.InteractEvent=void 0;var ar=function(e){(function(a,s){if(typeof s!="function"&&s!==null)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(s&&s.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),Object.defineProperty(a,"prototype",{writable:!1}),s&&nn(a,s)})(l,e);var t,n,r,o,i=(r=l,o=function(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}(),function(){var a,s=wt(r);if(o){var u=wt(this).constructor;a=Reflect.construct(s,arguments,u)}else a=s.apply(this,arguments);return Io(this,a)});function l(a,s,u,c,f,p,h){var d;(function(A,j){if(!(A instanceof j))throw new TypeError("Cannot call a class as a function")})(this,l),C(I(d=i.call(this,a)),"relatedTarget",null),C(I(d),"screenX",void 0),C(I(d),"screenY",void 0),C(I(d),"button",void 0),C(I(d),"buttons",void 0),C(I(d),"ctrlKey",void 0),C(I(d),"shiftKey",void 0),C(I(d),"altKey",void 0),C(I(d),"metaKey",void 0),C(I(d),"page",void 0),C(I(d),"client",void 0),C(I(d),"delta",void 0),C(I(d),"rect",void 0),C(I(d),"x0",void 0),C(I(d),"y0",void 0),C(I(d),"t0",void 0),C(I(d),"dt",void 0),C(I(d),"duration",void 0),C(I(d),"clientX0",void 0),C(I(d),"clientY0",void 0),C(I(d),"velocity",void 0),C(I(d),"speed",void 0),C(I(d),"swipe",void 0),C(I(d),"axes",void 0),C(I(d),"preEnd",void 0),f=f||a.element;var g=a.interactable,m=(g&&g.options||Ne.defaults).deltaSource,y=(0,he.default)(g,f,u),b=c==="start",P=c==="end",T=b?I(d):a.prevEvent,M=b?a.coords.start:P?{page:T.page,client:T.client,timeStamp:a.coords.cur.timeStamp}:a.coords.cur;return d.page=(0,_.default)({},M.page),d.client=(0,_.default)({},M.client),d.rect=(0,_.default)({},a.rect),d.timeStamp=M.timeStamp,P||(d.page.x-=y.x,d.page.y-=y.y,d.client.x-=y.x,d.client.y-=y.y),d.ctrlKey=s.ctrlKey,d.altKey=s.altKey,d.shiftKey=s.shiftKey,d.metaKey=s.metaKey,d.button=s.button,d.buttons=s.buttons,d.target=f,d.currentTarget=f,d.preEnd=p,d.type=h||u+(c||""),d.interactable=g,d.t0=b?a.pointers[a.pointers.length-1].downTime:T.t0,d.x0=a.coords.start.page.x-y.x,d.y0=a.coords.start.page.y-y.y,d.clientX0=a.coords.start.client.x-y.x,d.clientY0=a.coords.start.client.y-y.y,d.delta=b||P?{x:0,y:0}:{x:d[m].x-T[m].x,y:d[m].y-T[m].y},d.dt=a.coords.delta.timeStamp,d.duration=d.timeStamp-d.t0,d.velocity=(0,_.default)({},a.coords.velocity[m]),d.speed=(0,ce.default)(d.velocity.x,d.velocity.y),d.swipe=P||c==="inertiastart"?d.getSwipe():null,d}return t=l,(n=[{key:"getSwipe",value:function(){var a=this._interaction;if(a.prevEvent.speed<600||this.timeStamp-a.prevEvent.timeStamp>150)return null;var s=180*Math.atan2(a.prevEvent.velocityY,a.prevEvent.velocityX)/Math.PI;s<0&&(s+=360);var u=112.5<=s&&s<247.5,c=202.5<=s&&s<337.5;return{up:c,down:!c&&22.5<=s&&s<157.5,left:u,right:!u&&(292.5<=s||s<67.5),angle:s,speed:a.prevEvent.speed,velocity:{x:a.prevEvent.velocityX,y:a.prevEvent.velocityY}}}},{key:"preventDefault",value:function(){}},{key:"stopImmediatePropagation",value:function(){this.immediatePropagationStopped=this.propagationStopped=!0}},{key:"stopPropagation",value:function(){this.propagationStopped=!0}}])&&ko(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),l}(je.BaseEvent);Ue.InteractEvent=ar,Object.defineProperties(ar.prototype,{pageX:{get:function(){return this.page.x},set:function(e){this.page.x=e}},pageY:{get:function(){return this.page.y},set:function(e){this.page.y=e}},clientX:{get:function(){return this.client.x},set:function(e){this.client.x=e}},clientY:{get:function(){return this.client.y},set:function(e){this.client.y=e}},dx:{get:function(){return this.delta.x},set:function(e){this.delta.x=e}},dy:{get:function(){return this.delta.y},set:function(e){this.delta.y=e}},velocityX:{get:function(){return this.velocity.x},set:function(e){this.velocity.x=e}},velocityY:{get:function(){return this.velocity.y},set:function(e){this.velocity.y=e}}});var Ve={};function sr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Do(e,t,n){return t&&sr(e.prototype,t),n&&sr(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function qe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(Ve,"__esModule",{value:!0}),Ve.PointerInfo=void 0;var Ao=Do(function e(t,n,r,o,i){(function(l,a){if(!(l instanceof a))throw new TypeError("Cannot call a class as a function")})(this,e),qe(this,"id",void 0),qe(this,"pointer",void 0),qe(this,"event",void 0),qe(this,"downTime",void 0),qe(this,"downTarget",void 0),this.id=t,this.pointer=n,this.event=r,this.downTime=o,this.downTarget=i});Ve.PointerInfo=Ao;var _t,Pt,G={};function Ro(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function F(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(G,"__esModule",{value:!0}),G.Interaction=void 0,Object.defineProperty(G,"PointerInfo",{enumerable:!0,get:function(){return Ve.PointerInfo}}),G.default=G._ProxyValues=G._ProxyMethods=void 0,G._ProxyValues=_t,function(e){e.interactable="",e.element="",e.prepared="",e.pointerIsDown="",e.pointerWasMoved="",e._proxy=""}(_t||(G._ProxyValues=_t={})),G._ProxyMethods=Pt,function(e){e.start="",e.move="",e.end="",e.stop="",e.interacting=""}(Pt||(G._ProxyMethods=Pt={}));var zo=0,lr=function(){function e(r){var o=this,i=r.pointerType,l=r.scopeFire;(function(p,h){if(!(p instanceof h))throw new TypeError("Cannot call a class as a function")})(this,e),F(this,"interactable",null),F(this,"element",null),F(this,"rect",null),F(this,"_rects",void 0),F(this,"edges",null),F(this,"_scopeFire",void 0),F(this,"prepared",{name:null,axis:null,edges:null}),F(this,"pointerType",void 0),F(this,"pointers",[]),F(this,"downEvent",null),F(this,"downPointer",{}),F(this,"_latestPointer",{pointer:null,event:null,eventTarget:null}),F(this,"prevEvent",null),F(this,"pointerIsDown",!1),F(this,"pointerWasMoved",!1),F(this,"_interacting",!1),F(this,"_ending",!1),F(this,"_stopped",!0),F(this,"_proxy",null),F(this,"simulation",null),F(this,"doMove",(0,H.warnOnce)(function(p){this.move(p)},"The interaction.doMove() method has been renamed to interaction.move()")),F(this,"coords",{start:w.newCoords(),prev:w.newCoords(),cur:w.newCoords(),delta:w.newCoords(),velocity:w.newCoords()}),F(this,"_id",zo++),this._scopeFire=l,this.pointerType=i;var a=this;this._proxy={};var s=function(p){Object.defineProperty(o._proxy,p,{get:function(){return a[p]}})};for(var u in _t)s(u);var c=function(p){Object.defineProperty(o._proxy,p,{value:function(){return a[p].apply(a,arguments)}})};for(var f in Pt)c(f);this._scopeFire("interactions:new",{interaction:this})}var t,n;return t=e,n=[{key:"pointerMoveTolerance",get:function(){return 1}},{key:"pointerDown",value:function(r,o,i){var l=this.updatePointer(r,o,i,!0),a=this.pointers[l];this._scopeFire("interactions:down",{pointer:r,event:o,eventTarget:i,pointerIndex:l,pointerInfo:a,type:"down",interaction:this})}},{key:"start",value:function(r,o,i){return!(this.interacting()||!this.pointerIsDown||this.pointers.length<(r.name==="gesture"?2:1)||!o.options[r.name].enabled)&&((0,H.copyAction)(this.prepared,r),this.interactable=o,this.element=i,this.rect=o.getRect(i),this.edges=this.prepared.edges?(0,_.default)({},this.prepared.edges):{left:!0,right:!0,top:!0,bottom:!0},this._stopped=!1,this._interacting=this._doPhase({interaction:this,event:this.downEvent,phase:"start"})&&!this._stopped,this._interacting)}},{key:"pointerMove",value:function(r,o,i){this.simulation||this.modification&&this.modification.endResult||this.updatePointer(r,o,i,!1);var l,a,s=this.coords.cur.page.x===this.coords.prev.page.x&&this.coords.cur.page.y===this.coords.prev.page.y&&this.coords.cur.client.x===this.coords.prev.client.x&&this.coords.cur.client.y===this.coords.prev.client.y;this.pointerIsDown&&!this.pointerWasMoved&&(l=this.coords.cur.client.x-this.coords.start.client.x,a=this.coords.cur.client.y-this.coords.start.client.y,this.pointerWasMoved=(0,ce.default)(l,a)>this.pointerMoveTolerance);var u=this.getPointerIndex(r),c={pointer:r,pointerIndex:u,pointerInfo:this.pointers[u],event:o,type:"move",eventTarget:i,dx:l,dy:a,duplicate:s,interaction:this};s||w.setCoordVelocity(this.coords.velocity,this.coords.delta),this._scopeFire("interactions:move",c),s||this.simulation||(this.interacting()&&(c.type=null,this.move(c)),this.pointerWasMoved&&w.copyCoords(this.coords.prev,this.coords.cur))}},{key:"move",value:function(r){r&&r.event||w.setZeroCoords(this.coords.delta),(r=(0,_.default)({pointer:this._latestPointer.pointer,event:this._latestPointer.event,eventTarget:this._latestPointer.eventTarget,interaction:this},r||{})).phase="move",this._doPhase(r)}},{key:"pointerUp",value:function(r,o,i,l){var a=this.getPointerIndex(r);a===-1&&(a=this.updatePointer(r,o,i,!1));var s=/cancel$/i.test(o.type)?"cancel":"up";this._scopeFire("interactions:".concat(s),{pointer:r,pointerIndex:a,pointerInfo:this.pointers[a],event:o,eventTarget:i,type:s,curEventTarget:l,interaction:this}),this.simulation||this.end(o),this.removePointer(r,o)}},{key:"documentBlur",value:function(r){this.end(r),this._scopeFire("interactions:blur",{event:r,type:"blur",interaction:this})}},{key:"end",value:function(r){var o;this._ending=!0,r=r||this._latestPointer.event,this.interacting()&&(o=this._doPhase({event:r,interaction:this,phase:"end"})),this._ending=!1,o===!0&&this.stop()}},{key:"currentAction",value:function(){return this._interacting?this.prepared.name:null}},{key:"interacting",value:function(){return this._interacting}},{key:"stop",value:function(){this._scopeFire("interactions:stop",{interaction:this}),this.interactable=this.element=null,this._interacting=!1,this._stopped=!0,this.prepared.name=this.prevEvent=null}},{key:"getPointerIndex",value:function(r){var o=w.getPointerId(r);return this.pointerType==="mouse"||this.pointerType==="pen"?this.pointers.length-1:k.findIndex(this.pointers,function(i){return i.id===o})}},{key:"getPointerInfo",value:function(r){return this.pointers[this.getPointerIndex(r)]}},{key:"updatePointer",value:function(r,o,i,l){var a=w.getPointerId(r),s=this.getPointerIndex(r),u=this.pointers[s];return l=l!==!1&&(l||/(down|start)$/i.test(o.type)),u?u.pointer=r:(u=new Ve.PointerInfo(a,r,o,null,null),s=this.pointers.length,this.pointers.push(u)),w.setCoords(this.coords.cur,this.pointers.map(function(c){return c.pointer}),this._now()),w.setCoordDeltas(this.coords.delta,this.coords.prev,this.coords.cur),l&&(this.pointerIsDown=!0,u.downTime=this.coords.cur.timeStamp,u.downTarget=i,w.pointerExtend(this.downPointer,r),this.interacting()||(w.copyCoords(this.coords.start,this.coords.cur),w.copyCoords(this.coords.prev,this.coords.cur),this.downEvent=o,this.pointerWasMoved=!1)),this._updateLatestPointer(r,o,i),this._scopeFire("interactions:update-pointer",{pointer:r,event:o,eventTarget:i,down:l,pointerInfo:u,pointerIndex:s,interaction:this}),s}},{key:"removePointer",value:function(r,o){var i=this.getPointerIndex(r);if(i!==-1){var l=this.pointers[i];this._scopeFire("interactions:remove-pointer",{pointer:r,event:o,eventTarget:null,pointerIndex:i,pointerInfo:l,interaction:this}),this.pointers.splice(i,1),this.pointerIsDown=!1}}},{key:"_updateLatestPointer",value:function(r,o,i){this._latestPointer.pointer=r,this._latestPointer.event=o,this._latestPointer.eventTarget=i}},{key:"destroy",value:function(){this._latestPointer.pointer=null,this._latestPointer.event=null,this._latestPointer.eventTarget=null}},{key:"_createPreparedEvent",value:function(r,o,i,l){return new Ue.InteractEvent(this,r,this.prepared.name,o,this.element,i,l)}},{key:"_fireEvent",value:function(r){var o;(o=this.interactable)==null||o.fire(r),(!this.prevEvent||r.timeStamp>=this.prevEvent.timeStamp)&&(this.prevEvent=r)}},{key:"_doPhase",value:function(r){var o=r.event,i=r.phase,l=r.preEnd,a=r.type,s=this.rect;if(s&&i==="move"&&(z.addEdges(this.edges,s,this.coords.delta[this.interactable.options.deltaSource]),s.width=s.right-s.left,s.height=s.bottom-s.top),this._scopeFire("interactions:before-action-".concat(i),r)===!1)return!1;var u=r.iEvent=this._createPreparedEvent(o,i,l,a);return this._scopeFire("interactions:action-".concat(i),r),i==="start"&&(this.prevEvent=u),this._fireEvent(u),this._scopeFire("interactions:after-action-".concat(i),r),!0}},{key:"_now",value:function(){return Date.now()}}],n&&Ro(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();G.Interaction=lr;var Co=lr;G.default=Co;var fe={};function ur(e){e.pointerIsDown&&(on(e.coords.cur,e.offset.total),e.offset.pending.x=0,e.offset.pending.y=0)}function cr(e){rn(e.interaction)}function rn(e){if(!function(n){return!(!n.offset.pending.x&&!n.offset.pending.y)}(e))return!1;var t=e.offset.pending;return on(e.coords.cur,t),on(e.coords.delta,t),z.addEdges(e.edges,e.rect,t),t.x=0,t.y=0,!0}function Fo(e){var t=e.x,n=e.y;this.offset.pending.x+=t,this.offset.pending.y+=n,this.offset.total.x+=t,this.offset.total.y+=n}function on(e,t){var n=e.page,r=e.client,o=t.x,i=t.y;n.x+=o,n.y+=i,r.x+=o,r.y+=i}Object.defineProperty(fe,"__esModule",{value:!0}),fe.addTotal=ur,fe.applyPending=rn,fe.default=void 0,G._ProxyMethods.offsetBy="";var Xo={id:"offset",before:["modifiers","pointer-events","actions","inertia"],install:function(e){e.Interaction.prototype.offsetBy=Fo},listeners:{"interactions:new":function(e){e.interaction.offset={total:{x:0,y:0},pending:{x:0,y:0}}},"interactions:update-pointer":function(e){return ur(e.interaction)},"interactions:before-action-start":cr,"interactions:before-action-move":cr,"interactions:before-action-end":function(e){var t=e.interaction;if(rn(t))return t.move({offset:!0}),t.end(),!1},"interactions:stop":function(e){var t=e.interaction;t.offset.total.x=0,t.offset.total.y=0,t.offset.pending.x=0,t.offset.pending.y=0}}},Bo=Xo;fe.default=Bo;var _e={};function Yo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(_e,"__esModule",{value:!0}),_e.default=_e.InertiaState=void 0;var fr=function(){function e(r){(function(o,i){if(!(o instanceof i))throw new TypeError("Cannot call a class as a function")})(this,e),Y(this,"active",!1),Y(this,"isModified",!1),Y(this,"smoothEnd",!1),Y(this,"allowResume",!1),Y(this,"modification",void 0),Y(this,"modifierCount",0),Y(this,"modifierArg",void 0),Y(this,"startCoords",void 0),Y(this,"t0",0),Y(this,"v0",0),Y(this,"te",0),Y(this,"targetOffset",void 0),Y(this,"modifiedOffset",void 0),Y(this,"currentOffset",void 0),Y(this,"lambda_v0",0),Y(this,"one_ve_v0",0),Y(this,"timeout",void 0),Y(this,"interaction",void 0),this.interaction=r}var t,n;return t=e,(n=[{key:"start",value:function(r){var o=this.interaction,i=Ot(o);if(!i||!i.enabled)return!1;var l=o.coords.velocity.client,a=(0,ce.default)(l.x,l.y),s=this.modification||(this.modification=new xe.default(o));if(s.copyFrom(o.modification),this.t0=o._now(),this.allowResume=i.allowResume,this.v0=a,this.currentOffset={x:0,y:0},this.startCoords=o.coords.cur.page,this.modifierArg=s.fillArg({pageCoords:this.startCoords,preEnd:!0,phase:"inertiastart"}),this.t0-o.coords.cur.timeStamp<50&&a>i.minSpeed&&a>i.endSpeed)this.startInertia();else{if(s.result=s.setAll(this.modifierArg),!s.result.changed)return!1;this.startSmoothEnd()}return o.modification.result.rect=null,o.offsetBy(this.targetOffset),o._doPhase({interaction:o,event:r,phase:"inertiastart"}),o.offsetBy({x:-this.targetOffset.x,y:-this.targetOffset.y}),o.modification.result.rect=null,this.active=!0,o.simulation=this,!0}},{key:"startInertia",value:function(){var r=this,o=this.interaction.coords.velocity.client,i=Ot(this.interaction),l=i.resistance,a=-Math.log(i.endSpeed/this.v0)/l;this.targetOffset={x:(o.x-a)/l,y:(o.y-a)/l},this.te=a,this.lambda_v0=l/this.v0,this.one_ve_v0=1-i.endSpeed/this.v0;var s=this.modification,u=this.modifierArg;u.pageCoords={x:this.startCoords.x+this.targetOffset.x,y:this.startCoords.y+this.targetOffset.y},s.result=s.setAll(u),s.result.changed&&(this.isModified=!0,this.modifiedOffset={x:this.targetOffset.x+s.result.delta.x,y:this.targetOffset.y+s.result.delta.y}),this.onNextFrame(function(){return r.inertiaTick()})}},{key:"startSmoothEnd",value:function(){var r=this;this.smoothEnd=!0,this.isModified=!0,this.targetOffset={x:this.modification.result.delta.x,y:this.modification.result.delta.y},this.onNextFrame(function(){return r.smoothEndTick()})}},{key:"onNextFrame",value:function(r){var o=this;this.timeout=te.default.request(function(){o.active&&r()})}},{key:"inertiaTick",value:function(){var r,o,i,l,a,s=this,u=this.interaction,c=Ot(u).resistance,f=(u._now()-this.t0)/1e3;if(f<this.te){var p,h=1-(Math.exp(-c*f)-this.lambda_v0)/this.one_ve_v0;this.isModified?(r=this.targetOffset.x,o=this.targetOffset.y,i=this.modifiedOffset.x,l=this.modifiedOffset.y,p={x:dr(a=h,0,r,i),y:dr(a,0,o,l)}):p={x:this.targetOffset.x*h,y:this.targetOffset.y*h};var d={x:p.x-this.currentOffset.x,y:p.y-this.currentOffset.y};this.currentOffset.x+=d.x,this.currentOffset.y+=d.y,u.offsetBy(d),u.move(),this.onNextFrame(function(){return s.inertiaTick()})}else u.offsetBy({x:this.modifiedOffset.x-this.currentOffset.x,y:this.modifiedOffset.y-this.currentOffset.y}),this.end()}},{key:"smoothEndTick",value:function(){var r=this,o=this.interaction,i=o._now()-this.t0,l=Ot(o).smoothEndDuration;if(i<l){var a={x:pr(i,0,this.targetOffset.x,l),y:pr(i,0,this.targetOffset.y,l)},s={x:a.x-this.currentOffset.x,y:a.y-this.currentOffset.y};this.currentOffset.x+=s.x,this.currentOffset.y+=s.y,o.offsetBy(s),o.move({skipModifiers:this.modifierCount}),this.onNextFrame(function(){return r.smoothEndTick()})}else o.offsetBy({x:this.targetOffset.x-this.currentOffset.x,y:this.targetOffset.y-this.currentOffset.y}),this.end()}},{key:"resume",value:function(r){var o=r.pointer,i=r.event,l=r.eventTarget,a=this.interaction;a.offsetBy({x:-this.currentOffset.x,y:-this.currentOffset.y}),a.updatePointer(o,i,l,!0),a._doPhase({interaction:a,event:i,phase:"resume"}),(0,w.copyCoords)(a.coords.prev,a.coords.cur),this.stop()}},{key:"end",value:function(){this.interaction.move(),this.interaction.end(),this.stop()}},{key:"stop",value:function(){this.active=this.smoothEnd=!1,this.interaction.simulation=null,te.default.cancel(this.timeout)}}])&&Yo(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Ot(e){var t=e.interactable,n=e.prepared;return t&&t.options&&n.name&&t.options[n.name].inertia}_e.InertiaState=fr;var Lo={id:"inertia",before:["modifiers","actions"],install:function(e){var t=e.defaults;e.usePlugin(fe.default),e.usePlugin(L.default),e.actions.phases.inertiastart=!0,e.actions.phases.resume=!0,t.perAction.inertia={enabled:!1,resistance:10,minSpeed:100,endSpeed:10,allowResume:!0,smoothEndDuration:300}},listeners:{"interactions:new":function(e){var t=e.interaction;t.inertia=new fr(t)},"interactions:before-action-end":function(e){var t=e.interaction,n=e.event;return(!t._interacting||t.simulation||!t.inertia.start(n))&&null},"interactions:down":function(e){var t=e.interaction,n=e.eventTarget,r=t.inertia;if(r.active)for(var o=n;v.default.element(o);){if(o===t.element){r.resume(e);break}o=O.parentNode(o)}},"interactions:stop":function(e){var t=e.interaction.inertia;t.active&&t.stop()},"interactions:before-action-resume":function(e){var t=e.interaction.modification;t.stop(e),t.start(e,e.interaction.coords.cur.page),t.applyToInteraction(e)},"interactions:before-action-inertiastart":function(e){return e.interaction.modification.setAndApply(e)},"interactions:action-resume":L.addEventModifiers,"interactions:action-inertiastart":L.addEventModifiers,"interactions:after-action-inertiastart":function(e){return e.interaction.modification.restoreInteractionCoords(e)},"interactions:after-action-resume":function(e){return e.interaction.modification.restoreInteractionCoords(e)}}};function dr(e,t,n,r){var o=1-e;return o*o*t+2*o*e*n+e*e*r}function pr(e,t,n,r){return-n*(e/=r)*(e-2)+t}var Wo=Lo;_e.default=Wo;var $e={};function No(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ge(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function vr(e,t){for(var n=0;n<t.length;n++){var r=t[n];if(e.immediatePropagationStopped)break;r(e)}}Object.defineProperty($e,"__esModule",{value:!0}),$e.Eventable=void 0;var Uo=function(){function e(r){(function(o,i){if(!(o instanceof i))throw new TypeError("Cannot call a class as a function")})(this,e),Ge(this,"options",void 0),Ge(this,"types",{}),Ge(this,"propagationStopped",!1),Ge(this,"immediatePropagationStopped",!1),Ge(this,"global",void 0),this.options=(0,_.default)({},r||{})}var t,n;return t=e,(n=[{key:"fire",value:function(r){var o,i=this.global;(o=this.types[r.type])&&vr(r,o),!r.propagationStopped&&i&&(o=i[r.type])&&vr(r,o)}},{key:"on",value:function(r,o){var i=(0,Te.default)(r,o);for(r in i)this.types[r]=k.merge(this.types[r]||[],i[r])}},{key:"off",value:function(r,o){var i=(0,Te.default)(r,o);for(r in i){var l=this.types[r];if(l&&l.length)for(var a=0;a<i[r].length;a++){var s=i[r][a],u=l.indexOf(s);u!==-1&&l.splice(u,1)}}}},{key:"getRect",value:function(r){return null}}])&&No(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();$e.Eventable=Uo;var He={};Object.defineProperty(He,"__esModule",{value:!0}),He.default=function(e,t){if(t.phaselessTypes[e])return!0;for(var n in t.map)if(e.indexOf(n)===0&&e.substr(n.length)in t.phases)return!0;return!1};var an={};Object.defineProperty(an,"__esModule",{value:!0}),an.createInteractStatic=function(e){var t=function n(r,o){var i=e.interactables.get(r,o);return i||((i=e.interactables.new(r,o)).events.global=n.globalEvents),i};return t.getPointerAverage=w.pointerAverage,t.getTouchBBox=w.touchBBox,t.getTouchDistance=w.touchDistance,t.getTouchAngle=w.touchAngle,t.getElementRect=O.getElementRect,t.getElementClientRect=O.getElementClientRect,t.matchesSelector=O.matchesSelector,t.closest=O.closest,t.globalEvents={},t.version="1.10.17",t.scope=e,t.use=function(n,r){return this.scope.usePlugin(n,r),this},t.isSet=function(n,r){return!!this.scope.interactables.get(n,r&&r.context)},t.on=(0,H.warnOnce)(function(n,r,o){if(v.default.string(n)&&n.search(" ")!==-1&&(n=n.trim().split(/ +/)),v.default.array(n)){for(var i=0;i<n.length;i++){var l=n[i];this.on(l,r,o)}return this}if(v.default.object(n)){for(var a in n)this.on(a,n[a],r);return this}return(0,He.default)(n,this.scope.actions)?this.globalEvents[n]?this.globalEvents[n].push(r):this.globalEvents[n]=[r]:this.scope.events.add(this.scope.document,n,r,{options:o}),this},"The interact.on() method is being deprecated"),t.off=(0,H.warnOnce)(function(n,r,o){if(v.default.string(n)&&n.search(" ")!==-1&&(n=n.trim().split(/ +/)),v.default.array(n)){for(var i=0;i<n.length;i++){var l=n[i];this.off(l,r,o)}return this}if(v.default.object(n)){for(var a in n)this.off(a,n[a],r);return this}var s;return(0,He.default)(n,this.scope.actions)?n in this.globalEvents&&(s=this.globalEvents[n].indexOf(r))!==-1&&this.globalEvents[n].splice(s,1):this.scope.events.remove(this.scope.document,n,r,o),this},"The interact.off() method is being deprecated"),t.debug=function(){return this.scope},t.supportsTouch=function(){return q.default.supportsTouch},t.supportsPointerEvent=function(){return q.default.supportsPointerEvent},t.stop=function(){for(var n=0;n<this.scope.interactions.list.length;n++)this.scope.interactions.list[n].stop();return this},t.pointerMoveTolerance=function(n){return v.default.number(n)?(this.scope.interactions.pointerMoveTolerance=n,this):this.scope.interactions.pointerMoveTolerance},t.addDocument=function(n,r){this.scope.addDocument(n,r)},t.removeDocument=function(n){this.scope.removeDocument(n)},t};var Et={};function Vo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function se(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(Et,"__esModule",{value:!0}),Et.Interactable=void 0;var qo=function(){function e(r,o,i,l){(function(a,s){if(!(a instanceof s))throw new TypeError("Cannot call a class as a function")})(this,e),se(this,"options",void 0),se(this,"_actions",void 0),se(this,"target",void 0),se(this,"events",new $e.Eventable),se(this,"_context",void 0),se(this,"_win",void 0),se(this,"_doc",void 0),se(this,"_scopeEvents",void 0),se(this,"_rectChecker",void 0),this._actions=o.actions,this.target=r,this._context=o.context||i,this._win=(0,x.getWindow)((0,O.trySelector)(r)?this._context:r),this._doc=this._win.document,this._scopeEvents=l,this.set(o)}var t,n;return t=e,(n=[{key:"_defaults",get:function(){return{base:{},perAction:{},actions:{}}}},{key:"setOnEvents",value:function(r,o){return v.default.func(o.onstart)&&this.on("".concat(r,"start"),o.onstart),v.default.func(o.onmove)&&this.on("".concat(r,"move"),o.onmove),v.default.func(o.onend)&&this.on("".concat(r,"end"),o.onend),v.default.func(o.oninertiastart)&&this.on("".concat(r,"inertiastart"),o.oninertiastart),this}},{key:"updatePerActionListeners",value:function(r,o,i){(v.default.array(o)||v.default.object(o))&&this.off(r,o),(v.default.array(i)||v.default.object(i))&&this.on(r,i)}},{key:"setPerAction",value:function(r,o){var i=this._defaults;for(var l in o){var a=l,s=this.options[r],u=o[a];a==="listeners"&&this.updatePerActionListeners(r,s.listeners,u),v.default.array(u)?s[a]=k.from(u):v.default.plainObject(u)?(s[a]=(0,_.default)(s[a]||{},(0,be.default)(u)),v.default.object(i.perAction[a])&&"enabled"in i.perAction[a]&&(s[a].enabled=u.enabled!==!1)):v.default.bool(u)&&v.default.object(i.perAction[a])?s[a].enabled=u:s[a]=u}}},{key:"getRect",value:function(r){return r=r||(v.default.element(this.target)?this.target:null),v.default.string(this.target)&&(r=r||this._context.querySelector(this.target)),(0,O.getElementRect)(r)}},{key:"rectChecker",value:function(r){var o=this;return v.default.func(r)?(this._rectChecker=r,this.getRect=function(i){var l=(0,_.default)({},o._rectChecker(i));return"width"in l||(l.width=l.right-l.left,l.height=l.bottom-l.top),l},this):r===null?(delete this.getRect,delete this._rectChecker,this):this.getRect}},{key:"_backCompatOption",value:function(r,o){if((0,O.trySelector)(o)||v.default.object(o)){for(var i in this.options[r]=o,this._actions.map)this.options[i][r]=o;return this}return this.options[r]}},{key:"origin",value:function(r){return this._backCompatOption("origin",r)}},{key:"deltaSource",value:function(r){return r==="page"||r==="client"?(this.options.deltaSource=r,this):this.options.deltaSource}},{key:"context",value:function(){return this._context}},{key:"inContext",value:function(r){return this._context===r.ownerDocument||(0,O.nodeContains)(this._context,r)}},{key:"testIgnoreAllow",value:function(r,o,i){return!this.testIgnore(r.ignoreFrom,o,i)&&this.testAllow(r.allowFrom,o,i)}},{key:"testAllow",value:function(r,o,i){return!r||!!v.default.element(i)&&(v.default.string(r)?(0,O.matchesUpTo)(i,r,o):!!v.default.element(r)&&(0,O.nodeContains)(r,i))}},{key:"testIgnore",value:function(r,o,i){return!(!r||!v.default.element(i))&&(v.default.string(r)?(0,O.matchesUpTo)(i,r,o):!!v.default.element(r)&&(0,O.nodeContains)(r,i))}},{key:"fire",value:function(r){return this.events.fire(r),this}},{key:"_onOff",value:function(r,o,i,l){v.default.object(o)&&!v.default.array(o)&&(l=i,i=null);var a=r==="on"?"add":"remove",s=(0,Te.default)(o,i);for(var u in s){u==="wheel"&&(u=q.default.wheelEvent);for(var c=0;c<s[u].length;c++){var f=s[u][c];(0,He.default)(u,this._actions)?this.events[r](u,f):v.default.string(this.target)?this._scopeEvents["".concat(a,"Delegate")](this.target,this._context,u,f,l):this._scopeEvents[a](this.target,u,f,l)}}return this}},{key:"on",value:function(r,o,i){return this._onOff("on",r,o,i)}},{key:"off",value:function(r,o,i){return this._onOff("off",r,o,i)}},{key:"set",value:function(r){var o=this._defaults;for(var i in v.default.object(r)||(r={}),this.options=(0,be.default)(o.base),this._actions.methodDict){var l=i,a=this._actions.methodDict[l];this.options[l]={},this.setPerAction(l,(0,_.default)((0,_.default)({},o.perAction),o.actions[l])),this[a](r[l])}for(var s in r)v.default.func(this[s])&&this[s](r[s]);return this}},{key:"unset",value:function(){if(v.default.string(this.target))for(var r in this._scopeEvents.delegatedEvents)for(var o=this._scopeEvents.delegatedEvents[r],i=o.length-1;i>=0;i--){var l=o[i],a=l.selector,s=l.context,u=l.listeners;a===this.target&&s===this._context&&o.splice(i,1);for(var c=u.length-1;c>=0;c--)this._scopeEvents.removeDelegate(this.target,this._context,r,u[c][0],u[c][1])}else this._scopeEvents.remove(this.target,"all")}}])&&Vo(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();Et.Interactable=qo;var St={};function $o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function sn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(St,"__esModule",{value:!0}),St.InteractableSet=void 0;var Go=function(){function e(r){var o=this;(function(i,l){if(!(i instanceof l))throw new TypeError("Cannot call a class as a function")})(this,e),sn(this,"list",[]),sn(this,"selectorMap",{}),sn(this,"scope",void 0),this.scope=r,r.addListeners({"interactable:unset":function(i){var l=i.interactable,a=l.target,s=l._context,u=v.default.string(a)?o.selectorMap[a]:a[o.scope.id],c=k.findIndex(u,function(f){return f.context===s});u[c]&&(u[c].context=null,u[c].interactable=null),u.splice(c,1)}})}var t,n;return t=e,(n=[{key:"new",value:function(r,o){o=(0,_.default)(o||{},{actions:this.scope.actions});var i=new this.scope.Interactable(r,o,this.scope.document,this.scope.events),l={context:i._context,interactable:i};return this.scope.addDocument(i._doc),this.list.push(i),v.default.string(r)?(this.selectorMap[r]||(this.selectorMap[r]=[]),this.selectorMap[r].push(l)):(i.target[this.scope.id]||Object.defineProperty(r,this.scope.id,{value:[],configurable:!0}),r[this.scope.id].push(l)),this.scope.fire("interactable:new",{target:r,options:o,interactable:i,win:this.scope._win}),i}},{key:"get",value:function(r,o){var i=o&&o.context||this.scope.document,l=v.default.string(r),a=l?this.selectorMap[r]:r[this.scope.id];if(!a)return null;var s=k.find(a,function(u){return u.context===i&&(l||u.interactable.inContext(r))});return s&&s.interactable}},{key:"forEachMatch",value:function(r,o){for(var i=0;i<this.list.length;i++){var l=this.list[i],a=void 0;if((v.default.string(l.target)?v.default.element(r)&&O.matchesSelector(r,l.target):r===l.target)&&l.inContext(r)&&(a=o(l)),a!==void 0)return a}}}])&&$o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();St.InteractableSet=Go;var Tt={};function Ho(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ln(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function un(e,t){return function(n){if(Array.isArray(n))return n}(e)||function(n,r){var o=n==null?null:typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(o!=null){var i,l,a=[],s=!0,u=!1;try{for(o=o.call(n);!(s=(i=o.next()).done)&&(a.push(i.value),!r||a.length!==r);s=!0);}catch(c){u=!0,l=c}finally{try{s||o.return==null||o.return()}finally{if(u)throw l}}return a}}(e,t)||function(n,r){if(n){if(typeof n=="string")return hr(n,r);var o=Object.prototype.toString.call(n).slice(8,-1);return o==="Object"&&n.constructor&&(o=n.constructor.name),o==="Map"||o==="Set"?Array.from(n):o==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?hr(n,r):void 0}}(e,t)||function(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}()}function hr(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}Object.defineProperty(Tt,"__esModule",{value:!0}),Tt.default=void 0;var Ko=function(){function e(r){(function(o,i){if(!(o instanceof i))throw new TypeError("Cannot call a class as a function")})(this,e),ln(this,"currentTarget",void 0),ln(this,"originalEvent",void 0),ln(this,"type",void 0),this.originalEvent=r,(0,st.default)(this,r)}var t,n;return t=e,(n=[{key:"preventOriginalDefault",value:function(){this.originalEvent.preventDefault()}},{key:"stopPropagation",value:function(){this.originalEvent.stopPropagation()}},{key:"stopImmediatePropagation",value:function(){this.originalEvent.stopImmediatePropagation()}}])&&Ho(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Ke(e){if(!v.default.object(e))return{capture:!!e,passive:!1};var t=(0,_.default)({},e);return t.capture=!!e.capture,t.passive=!!e.passive,t}var Zo={id:"events",install:function(e){var t,n=[],r={},o=[],i={add:l,remove:a,addDelegate:function(c,f,p,h,d){var g=Ke(d);if(!r[p]){r[p]=[];for(var m=0;m<o.length;m++){var y=o[m];l(y,p,s),l(y,p,u,!0)}}var b=r[p],P=k.find(b,function(T){return T.selector===c&&T.context===f});P||(P={selector:c,context:f,listeners:[]},b.push(P)),P.listeners.push([h,g])},removeDelegate:function(c,f,p,h,d){var g,m=Ke(d),y=r[p],b=!1;if(y)for(g=y.length-1;g>=0;g--){var P=y[g];if(P.selector===c&&P.context===f){for(var T=P.listeners,M=T.length-1;M>=0;M--){var A=un(T[M],2),j=A[0],D=A[1],ee=D.capture,ue=D.passive;if(j===h&&ee===m.capture&&ue===m.passive){T.splice(M,1),T.length||(y.splice(g,1),a(f,p,s),a(f,p,u,!0)),b=!0;break}}if(b)break}}},delegateListener:s,delegateUseCapture:u,delegatedEvents:r,documents:o,targets:n,supportsOptions:!1,supportsPassive:!1};function l(c,f,p,h){var d=Ke(h),g=k.find(n,function(m){return m.eventTarget===c});g||(g={eventTarget:c,events:{}},n.push(g)),g.events[f]||(g.events[f]=[]),c.addEventListener&&!k.contains(g.events[f],p)&&(c.addEventListener(f,p,i.supportsOptions?d:d.capture),g.events[f].push(p))}function a(c,f,p,h){var d=Ke(h),g=k.findIndex(n,function(M){return M.eventTarget===c}),m=n[g];if(m&&m.events)if(f!=="all"){var y=!1,b=m.events[f];if(b){if(p==="all"){for(var P=b.length-1;P>=0;P--)a(c,f,b[P],d);return}for(var T=0;T<b.length;T++)if(b[T]===p){c.removeEventListener(f,p,i.supportsOptions?d:d.capture),b.splice(T,1),b.length===0&&(delete m.events[f],y=!0);break}}y&&!Object.keys(m.events).length&&n.splice(g,1)}else for(f in m.events)m.events.hasOwnProperty(f)&&a(c,f,"all")}function s(c,f){for(var p=Ke(f),h=new Ko(c),d=r[c.type],g=un(w.getEventTargets(c),1)[0],m=g;v.default.element(m);){for(var y=0;y<d.length;y++){var b=d[y],P=b.selector,T=b.context;if(O.matchesSelector(m,P)&&O.nodeContains(T,g)&&O.nodeContains(T,m)){var M=b.listeners;h.currentTarget=m;for(var A=0;A<M.length;A++){var j=un(M[A],2),D=j[0],ee=j[1],ue=ee.capture,jn=ee.passive;ue===p.capture&&jn===p.passive&&D(h)}}}m=O.parentNode(m)}}function u(c){return s(c,!0)}return(t=e.document)==null||t.createElement("div").addEventListener("test",null,{get capture(){return i.supportsOptions=!0},get passive(){return i.supportsPassive=!0}}),e.events=i,i}};Tt.default=Zo;var jt={};Object.defineProperty(jt,"__esModule",{value:!0}),jt.default=void 0;var Mt={methodOrder:["simulationResume","mouseOrPen","hasPointer","idle"],search:function(e){for(var t=0;t<Mt.methodOrder.length;t++){var n;n=Mt.methodOrder[t];var r=Mt[n](e);if(r)return r}return null},simulationResume:function(e){var t=e.pointerType,n=e.eventType,r=e.eventTarget,o=e.scope;if(!/down|start/i.test(n))return null;for(var i=0;i<o.interactions.list.length;i++){var l=o.interactions.list[i],a=r;if(l.simulation&&l.simulation.allowResume&&l.pointerType===t)for(;a;){if(a===l.element)return l;a=O.parentNode(a)}}return null},mouseOrPen:function(e){var t,n=e.pointerId,r=e.pointerType,o=e.eventType,i=e.scope;if(r!=="mouse"&&r!=="pen")return null;for(var l=0;l<i.interactions.list.length;l++){var a=i.interactions.list[l];if(a.pointerType===r){if(a.simulation&&!gr(a,n))continue;if(a.interacting())return a;t||(t=a)}}if(t)return t;for(var s=0;s<i.interactions.list.length;s++){var u=i.interactions.list[s];if(!(u.pointerType!==r||/down/i.test(o)&&u.simulation))return u}return null},hasPointer:function(e){for(var t=e.pointerId,n=e.scope,r=0;r<n.interactions.list.length;r++){var o=n.interactions.list[r];if(gr(o,t))return o}return null},idle:function(e){for(var t=e.pointerType,n=e.scope,r=0;r<n.interactions.list.length;r++){var o=n.interactions.list[r];if(o.pointers.length===1){var i=o.interactable;if(i&&(!i.options.gesture||!i.options.gesture.enabled))continue}else if(o.pointers.length>=2)continue;if(!o.interacting()&&t===o.pointerType)return o}return null}};function gr(e,t){return e.pointers.some(function(n){return n.id===t})}var Jo=Mt;jt.default=Jo;var kt={};function cn(e){return cn=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},cn(e)}function yr(e,t){return function(n){if(Array.isArray(n))return n}(e)||function(n,r){var o=n==null?null:typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(o!=null){var i,l,a=[],s=!0,u=!1;try{for(o=o.call(n);!(s=(i=o.next()).done)&&(a.push(i.value),!r||a.length!==r);s=!0);}catch(c){u=!0,l=c}finally{try{s||o.return==null||o.return()}finally{if(u)throw l}}return a}}(e,t)||function(n,r){if(n){if(typeof n=="string")return mr(n,r);var o=Object.prototype.toString.call(n).slice(8,-1);return o==="Object"&&n.constructor&&(o=n.constructor.name),o==="Map"||o==="Set"?Array.from(n):o==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?mr(n,r):void 0}}(e,t)||function(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}()}function mr(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Qo(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ei(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function fn(e,t){return fn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(n,r){return n.__proto__=r,n},fn(e,t)}function ti(e,t){if(t&&(cn(t)==="object"||typeof t=="function"))return t;if(t!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return function(n){if(n===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(e)}function It(e){return It=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},It(e)}Object.defineProperty(kt,"__esModule",{value:!0}),kt.default=void 0;var dn=["pointerDown","pointerMove","pointerUp","updatePointer","removePointer","windowBlur"];function br(e,t){return function(n){var r=t.interactions.list,o=w.getPointerType(n),i=yr(w.getEventTargets(n),2),l=i[0],a=i[1],s=[];if(/^touch/.test(n.type)){t.prevTouchTime=t.now();for(var u=0;u<n.changedTouches.length;u++){var c=n.changedTouches[u],f={pointer:c,pointerId:w.getPointerId(c),pointerType:o,eventType:n.type,eventTarget:l,curEventTarget:a,scope:t},p=xr(f);s.push([f.pointer,f.eventTarget,f.curEventTarget,p])}}else{var h=!1;if(!q.default.supportsPointerEvent&&/mouse/.test(n.type)){for(var d=0;d<r.length&&!h;d++)h=r[d].pointerType!=="mouse"&&r[d].pointerIsDown;h=h||t.now()-t.prevTouchTime<500||n.timeStamp===0}if(!h){var g={pointer:n,pointerId:w.getPointerId(n),pointerType:o,eventType:n.type,curEventTarget:a,eventTarget:l,scope:t},m=xr(g);s.push([g.pointer,g.eventTarget,g.curEventTarget,m])}}for(var y=0;y<s.length;y++){var b=yr(s[y],4),P=b[0],T=b[1],M=b[2];b[3][e](P,n,T,M)}}}function xr(e){var t=e.pointerType,n=e.scope,r={interaction:jt.default.search(e),searchDetails:e};return n.fire("interactions:find",r),r.interaction||n.interactions.new({pointerType:t})}function pn(e,t){var n=e.doc,r=e.scope,o=e.options,i=r.interactions.docEvents,l=r.events,a=l[t];for(var s in r.browser.isIOS&&!o.events&&(o.events={passive:!1}),l.delegatedEvents)a(n,s,l.delegateListener),a(n,s,l.delegateUseCapture,!0);for(var u=o&&o.events,c=0;c<i.length;c++){var f=i[c];a(n,f.type,f.listener,u)}}var ni={id:"core/interactions",install:function(e){for(var t={},n=0;n<dn.length;n++){var r=dn[n];t[r]=br(r,e)}var o,i=q.default.pEventTypes;function l(){for(var a=0;a<e.interactions.list.length;a++){var s=e.interactions.list[a];if(s.pointerIsDown&&s.pointerType==="touch"&&!s._interacting)for(var u=function(){var f=s.pointers[c];e.documents.some(function(p){var h=p.doc;return(0,O.nodeContains)(h,f.downTarget)})||s.removePointer(f.pointer,f.event)},c=0;c<s.pointers.length;c++)u()}}(o=B.default.PointerEvent?[{type:i.down,listener:l},{type:i.down,listener:t.pointerDown},{type:i.move,listener:t.pointerMove},{type:i.up,listener:t.pointerUp},{type:i.cancel,listener:t.pointerUp}]:[{type:"mousedown",listener:t.pointerDown},{type:"mousemove",listener:t.pointerMove},{type:"mouseup",listener:t.pointerUp},{type:"touchstart",listener:l},{type:"touchstart",listener:t.pointerDown},{type:"touchmove",listener:t.pointerMove},{type:"touchend",listener:t.pointerUp},{type:"touchcancel",listener:t.pointerUp}]).push({type:"blur",listener:function(a){for(var s=0;s<e.interactions.list.length;s++)e.interactions.list[s].documentBlur(a)}}),e.prevTouchTime=0,e.Interaction=function(a){(function(d,g){if(typeof g!="function"&&g!==null)throw new TypeError("Super expression must either be null or a function");d.prototype=Object.create(g&&g.prototype,{constructor:{value:d,writable:!0,configurable:!0}}),Object.defineProperty(d,"prototype",{writable:!1}),g&&fn(d,g)})(h,a);var s,u,c,f,p=(c=h,f=function(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}(),function(){var d,g=It(c);if(f){var m=It(this).constructor;d=Reflect.construct(g,arguments,m)}else d=g.apply(this,arguments);return ti(this,d)});function h(){return Qo(this,h),p.apply(this,arguments)}return s=h,(u=[{key:"pointerMoveTolerance",get:function(){return e.interactions.pointerMoveTolerance},set:function(d){e.interactions.pointerMoveTolerance=d}},{key:"_now",value:function(){return e.now()}}])&&ei(s.prototype,u),Object.defineProperty(s,"prototype",{writable:!1}),h}(G.default),e.interactions={list:[],new:function(a){a.scopeFire=function(u,c){return e.fire(u,c)};var s=new e.Interaction(a);return e.interactions.list.push(s),s},listeners:t,docEvents:o,pointerMoveTolerance:1},e.usePlugin(me.default)},listeners:{"scope:add-document":function(e){return pn(e,"add")},"scope:remove-document":function(e){return pn(e,"remove")},"interactable:unset":function(e,t){for(var n=e.interactable,r=t.interactions.list.length-1;r>=0;r--){var o=t.interactions.list[r];o.interactable===n&&(o.stop(),t.fire("interactions:destroy",{interaction:o}),o.destroy(),t.interactions.list.length>2&&t.interactions.list.splice(r,1))}}},onDocSignal:pn,doOnInteractions:br,methodNames:dn},ri=ni;kt.default=ri;var Ze={};function vn(e){return vn=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},vn(e)}function Je(){return Je=typeof Reflect<"u"&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=oi(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},Je.apply(this,arguments)}function oi(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&(e=de(e))!==null;);return e}function hn(e,t){return hn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(n,r){return n.__proto__=r,n},hn(e,t)}function ii(e,t){if(t&&(vn(t)==="object"||typeof t=="function"))return t;if(t!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return function(n){if(n===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(e)}function de(e){return de=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},de(e)}function wr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Pr(e,t,n){return t&&_r(e.prototype,t),n&&_r(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function W(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(Ze,"__esModule",{value:!0}),Ze.Scope=void 0,Ze.initScope=Or;var ai=function(){function e(){var t=this;wr(this,e),W(this,"id","__interact_scope_".concat(Math.floor(100*Math.random()))),W(this,"isInitialized",!1),W(this,"listenerMaps",[]),W(this,"browser",q.default),W(this,"defaults",(0,be.default)(Ne.defaults)),W(this,"Eventable",$e.Eventable),W(this,"actions",{map:{},phases:{start:!0,move:!0,end:!0},methodDict:{},phaselessTypes:{}}),W(this,"interactStatic",(0,an.createInteractStatic)(this)),W(this,"InteractEvent",Ue.InteractEvent),W(this,"Interactable",void 0),W(this,"interactables",new St.InteractableSet(this)),W(this,"_win",void 0),W(this,"document",void 0),W(this,"window",void 0),W(this,"documents",[]),W(this,"_plugins",{list:[],map:{}}),W(this,"onWindowUnload",function(r){return t.removeDocument(r.target)});var n=this;this.Interactable=function(r){(function(s,u){if(typeof u!="function"&&u!==null)throw new TypeError("Super expression must either be null or a function");s.prototype=Object.create(u&&u.prototype,{constructor:{value:s,writable:!0,configurable:!0}}),Object.defineProperty(s,"prototype",{writable:!1}),u&&hn(s,u)})(a,r);var o,i,l=(o=a,i=function(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}(),function(){var s,u=de(o);if(i){var c=de(this).constructor;s=Reflect.construct(u,arguments,c)}else s=u.apply(this,arguments);return ii(this,s)});function a(){return wr(this,a),l.apply(this,arguments)}return Pr(a,[{key:"_defaults",get:function(){return n.defaults}},{key:"set",value:function(s){return Je(de(a.prototype),"set",this).call(this,s),n.fire("interactable:set",{options:s,interactable:this}),this}},{key:"unset",value:function(){Je(de(a.prototype),"unset",this).call(this);var s=n.interactables.list.indexOf(this);s<0||(Je(de(a.prototype),"unset",this).call(this),n.interactables.list.splice(s,1),n.fire("interactable:unset",{interactable:this}))}}]),a}(Et.Interactable)}return Pr(e,[{key:"addListeners",value:function(t,n){this.listenerMaps.push({id:n,map:t})}},{key:"fire",value:function(t,n){for(var r=0;r<this.listenerMaps.length;r++){var o=this.listenerMaps[r].map[t];if(o&&o(n,this,t)===!1)return!1}}},{key:"init",value:function(t){return this.isInitialized?this:Or(this,t)}},{key:"pluginIsInstalled",value:function(t){return this._plugins.map[t.id]||this._plugins.list.indexOf(t)!==-1}},{key:"usePlugin",value:function(t,n){if(!this.isInitialized)return this;if(this.pluginIsInstalled(t))return this;if(t.id&&(this._plugins.map[t.id]=t),this._plugins.list.push(t),t.install&&t.install(this,n),t.listeners&&t.before){for(var r=0,o=this.listenerMaps.length,i=t.before.reduce(function(a,s){return a[s]=!0,a[Er(s)]=!0,a},{});r<o;r++){var l=this.listenerMaps[r].id;if(i[l]||i[Er(l)])break}this.listenerMaps.splice(r,0,{id:t.id,map:t.listeners})}else t.listeners&&this.listenerMaps.push({id:t.id,map:t.listeners});return this}},{key:"addDocument",value:function(t,n){if(this.getDocIndex(t)!==-1)return!1;var r=x.getWindow(t);n=n?(0,_.default)({},n):{},this.documents.push({doc:t,options:n}),this.events.documents.push(t),t!==this.document&&this.events.add(r,"unload",this.onWindowUnload),this.fire("scope:add-document",{doc:t,window:r,scope:this,options:n})}},{key:"removeDocument",value:function(t){var n=this.getDocIndex(t),r=x.getWindow(t),o=this.documents[n].options;this.events.remove(r,"unload",this.onWindowUnload),this.documents.splice(n,1),this.events.documents.splice(n,1),this.fire("scope:remove-document",{doc:t,window:r,scope:this,options:o})}},{key:"getDocIndex",value:function(t){for(var n=0;n<this.documents.length;n++)if(this.documents[n].doc===t)return n;return-1}},{key:"getDocOptions",value:function(t){var n=this.getDocIndex(t);return n===-1?null:this.documents[n].options}},{key:"now",value:function(){return(this.window.Date||Date).now()}}]),e}();function Or(e,t){return e.isInitialized=!0,v.default.window(t)&&x.init(t),B.default.init(t),q.default.init(t),te.default.init(t),e.window=t,e.document=t.document,e.usePlugin(kt.default),e.usePlugin(Tt.default),e}function Er(e){return e&&e.replace(/\/.*$/,"")}Ze.Scope=ai;var N={};Object.defineProperty(N,"__esModule",{value:!0}),N.default=void 0;var Sr=new Ze.Scope,si=Sr.interactStatic;N.default=si;var li=typeof globalThis<"u"?globalThis:typeof window<"u"?window:void 0;Sr.init(li);var Dt={};Object.defineProperty(Dt,"__esModule",{value:!0}),Dt.default=void 0,Dt.default=function(){};var At={};Object.defineProperty(At,"__esModule",{value:!0}),At.default=void 0,At.default=function(){};var Rt={};function Tr(e,t){return function(n){if(Array.isArray(n))return n}(e)||function(n,r){var o=n==null?null:typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(o!=null){var i,l,a=[],s=!0,u=!1;try{for(o=o.call(n);!(s=(i=o.next()).done)&&(a.push(i.value),!r||a.length!==r);s=!0);}catch(c){u=!0,l=c}finally{try{s||o.return==null||o.return()}finally{if(u)throw l}}return a}}(e,t)||function(n,r){if(n){if(typeof n=="string")return jr(n,r);var o=Object.prototype.toString.call(n).slice(8,-1);return o==="Object"&&n.constructor&&(o=n.constructor.name),o==="Map"||o==="Set"?Array.from(n):o==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?jr(n,r):void 0}}(e,t)||function(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}()}function jr(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}Object.defineProperty(Rt,"__esModule",{value:!0}),Rt.default=void 0,Rt.default=function(e){var t=[["x","y"],["left","top"],["right","bottom"],["width","height"]].filter(function(r){var o=Tr(r,2),i=o[0],l=o[1];return i in e||l in e}),n=function(r,o){for(var i=e.range,l=e.limits,a=l===void 0?{left:-1/0,right:1/0,top:-1/0,bottom:1/0}:l,s=e.offset,u=s===void 0?{x:0,y:0}:s,c={range:i,grid:e,x:null,y:null},f=0;f<t.length;f++){var p=Tr(t[f],2),h=p[0],d=p[1],g=Math.round((r-u.x)/e[h]),m=Math.round((o-u.y)/e[d]);c[h]=Math.max(a.left,Math.min(a.right,g*e[h]+u.x)),c[d]=Math.max(a.top,Math.min(a.bottom,m*e[d]+u.y))}return c};return n.grid=e,n.coordFields=t,n};var Qe={};Object.defineProperty(Qe,"__esModule",{value:!0}),Object.defineProperty(Qe,"edgeTarget",{enumerable:!0,get:function(){return Dt.default}}),Object.defineProperty(Qe,"elements",{enumerable:!0,get:function(){return At.default}}),Object.defineProperty(Qe,"grid",{enumerable:!0,get:function(){return Rt.default}});var zt={};Object.defineProperty(zt,"__esModule",{value:!0}),zt.default=void 0;var ui={id:"snappers",install:function(e){var t=e.interactStatic;t.snappers=(0,_.default)(t.snappers||{},Qe),t.createSnapGrid=t.snappers.grid}},ci=ui;zt.default=ci;var Ie={};function Mr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable})),n.push.apply(n,r)}return n}function gn(e){for(var t=1;t<arguments.length;t++){var n=arguments[t]!=null?arguments[t]:{};t%2?Mr(Object(n),!0).forEach(function(r){fi(e,r,n[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mr(Object(n)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))})}return e}function fi(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(Ie,"__esModule",{value:!0}),Ie.default=Ie.aspectRatio=void 0;var kr={start:function(e){var t=e.state,n=e.rect,r=e.edges,o=e.pageCoords,i=t.options.ratio,l=t.options,a=l.equalDelta,s=l.modifiers;i==="preserve"&&(i=n.width/n.height),t.startCoords=(0,_.default)({},o),t.startRect=(0,_.default)({},n),t.ratio=i,t.equalDelta=a;var u=t.linkedEdges={top:r.top||r.left&&!r.bottom,left:r.left||r.top&&!r.right,bottom:r.bottom||r.right&&!r.top,right:r.right||r.bottom&&!r.left};if(t.xIsPrimaryAxis=!(!r.left&&!r.right),t.equalDelta){var c=(u.left?1:-1)*(u.top?1:-1);t.edgeSign={x:c,y:c}}else t.edgeSign={x:u.left?-1:1,y:u.top?-1:1};if((0,_.default)(e.edges,u),s&&s.length){var f=new xe.default(e.interaction);f.copyFrom(e.interaction.modification),f.prepareStates(s),t.subModification=f,f.startAll(gn({},e))}},set:function(e){var t=e.state,n=e.rect,r=e.coords,o=(0,_.default)({},r),i=t.equalDelta?di:pi;if(i(t,t.xIsPrimaryAxis,r,n),!t.subModification)return null;var l=(0,_.default)({},n);(0,z.addEdges)(t.linkedEdges,l,{x:r.x-o.x,y:r.y-o.y});var a=t.subModification.setAll(gn(gn({},e),{},{rect:l,edges:t.linkedEdges,pageCoords:r,prevCoords:r,prevRect:l})),s=a.delta;return a.changed&&(i(t,Math.abs(s.x)>Math.abs(s.y),a.coords,a.rect),(0,_.default)(r,a.coords)),a.eventProps},defaults:{ratio:"preserve",equalDelta:!1,modifiers:[],enabled:!1}};function di(e,t,n){var r=e.startCoords,o=e.edgeSign;t?n.y=r.y+(n.x-r.x)*o.y:n.x=r.x+(n.y-r.y)*o.x}function pi(e,t,n,r){var o=e.startRect,i=e.startCoords,l=e.ratio,a=e.edgeSign;if(t){var s=r.width/l;n.y=i.y+(s-o.height)*a.y}else{var u=r.height*l;n.x=i.x+(u-o.width)*a.x}}Ie.aspectRatio=kr;var vi=(0,L.makeModifier)(kr,"aspectRatio");Ie.default=vi;var Pe={};Object.defineProperty(Pe,"__esModule",{value:!0}),Pe.default=void 0;var Ir=function(){};Ir._defaults={};var hi=Ir;Pe.default=hi;var yn={};Object.defineProperty(yn,"__esModule",{value:!0}),Object.defineProperty(yn,"default",{enumerable:!0,get:function(){return Pe.default}});var V={};function mn(e,t,n){return v.default.func(e)?z.resolveRectLike(e,t.interactable,t.element,[n.x,n.y,t]):z.resolveRectLike(e,t.interactable,t.element)}Object.defineProperty(V,"__esModule",{value:!0}),V.default=void 0,V.getRestrictionRect=mn,V.restrict=void 0;var Dr={start:function(e){var t=e.rect,n=e.startOffset,r=e.state,o=e.interaction,i=e.pageCoords,l=r.options,a=l.elementRect,s=(0,_.default)({left:0,top:0,right:0,bottom:0},l.offset||{});if(t&&a){var u=mn(l.restriction,o,i);if(u){var c=u.right-u.left-t.width,f=u.bottom-u.top-t.height;c<0&&(s.left+=c,s.right+=c),f<0&&(s.top+=f,s.bottom+=f)}s.left+=n.left-t.width*a.left,s.top+=n.top-t.height*a.top,s.right+=n.right-t.width*(1-a.right),s.bottom+=n.bottom-t.height*(1-a.bottom)}r.offset=s},set:function(e){var t=e.coords,n=e.interaction,r=e.state,o=r.options,i=r.offset,l=mn(o.restriction,n,t);if(l){var a=z.xywhToTlbr(l);t.x=Math.max(Math.min(a.right-i.right,t.x),a.left+i.left),t.y=Math.max(Math.min(a.bottom-i.bottom,t.y),a.top+i.top)}},defaults:{restriction:null,elementRect:null,offset:null,endOnly:!1,enabled:!1}};V.restrict=Dr;var gi=(0,L.makeModifier)(Dr,"restrict");V.default=gi;var ne={};Object.defineProperty(ne,"__esModule",{value:!0}),ne.restrictEdges=ne.default=void 0;var Ar={top:1/0,left:1/0,bottom:-1/0,right:-1/0},Rr={top:-1/0,left:-1/0,bottom:1/0,right:1/0};function zr(e,t){for(var n=["top","left","bottom","right"],r=0;r<n.length;r++){var o=n[r];o in e||(e[o]=t[o])}return e}var Cr={noInner:Ar,noOuter:Rr,start:function(e){var t,n=e.interaction,r=e.startOffset,o=e.state,i=o.options;if(i){var l=(0,V.getRestrictionRect)(i.offset,n,n.coords.start.page);t=z.rectToXY(l)}t=t||{x:0,y:0},o.offset={top:t.y+r.top,left:t.x+r.left,bottom:t.y-r.bottom,right:t.x-r.right}},set:function(e){var t=e.coords,n=e.edges,r=e.interaction,o=e.state,i=o.offset,l=o.options;if(n){var a=(0,_.default)({},t),s=(0,V.getRestrictionRect)(l.inner,r,a)||{},u=(0,V.getRestrictionRect)(l.outer,r,a)||{};zr(s,Ar),zr(u,Rr),n.top?t.y=Math.min(Math.max(u.top+i.top,a.y),s.top+i.top):n.bottom&&(t.y=Math.max(Math.min(u.bottom+i.bottom,a.y),s.bottom+i.bottom)),n.left?t.x=Math.min(Math.max(u.left+i.left,a.x),s.left+i.left):n.right&&(t.x=Math.max(Math.min(u.right+i.right,a.x),s.right+i.right))}},defaults:{inner:null,outer:null,offset:null,endOnly:!1,enabled:!1}};ne.restrictEdges=Cr;var yi=(0,L.makeModifier)(Cr,"restrictEdges");ne.default=yi;var De={};Object.defineProperty(De,"__esModule",{value:!0}),De.restrictRect=De.default=void 0;var mi=(0,_.default)({get elementRect(){return{top:0,left:0,bottom:1,right:1}},set elementRect(e){}},V.restrict.defaults),Fr={start:V.restrict.start,set:V.restrict.set,defaults:mi};De.restrictRect=Fr;var bi=(0,L.makeModifier)(Fr,"restrictRect");De.default=bi;var Ae={};Object.defineProperty(Ae,"__esModule",{value:!0}),Ae.restrictSize=Ae.default=void 0;var xi={width:-1/0,height:-1/0},wi={width:1/0,height:1/0},Xr={start:function(e){return ne.restrictEdges.start(e)},set:function(e){var t=e.interaction,n=e.state,r=e.rect,o=e.edges,i=n.options;if(o){var l=z.tlbrToXywh((0,V.getRestrictionRect)(i.min,t,e.coords))||xi,a=z.tlbrToXywh((0,V.getRestrictionRect)(i.max,t,e.coords))||wi;n.options={endOnly:i.endOnly,inner:(0,_.default)({},ne.restrictEdges.noInner),outer:(0,_.default)({},ne.restrictEdges.noOuter)},o.top?(n.options.inner.top=r.bottom-l.height,n.options.outer.top=r.bottom-a.height):o.bottom&&(n.options.inner.bottom=r.top+l.height,n.options.outer.bottom=r.top+a.height),o.left?(n.options.inner.left=r.right-l.width,n.options.outer.left=r.right-a.width):o.right&&(n.options.inner.right=r.left+l.width,n.options.outer.right=r.left+a.width),ne.restrictEdges.set(e),n.options=i}},defaults:{min:null,max:null,endOnly:!1,enabled:!1}};Ae.restrictSize=Xr;var _i=(0,L.makeModifier)(Xr,"restrictSize");Ae.default=_i;var bn={};Object.defineProperty(bn,"__esModule",{value:!0}),Object.defineProperty(bn,"default",{enumerable:!0,get:function(){return Pe.default}});var pe={};Object.defineProperty(pe,"__esModule",{value:!0}),pe.snap=pe.default=void 0;var Br={start:function(e){var t,n=e.interaction,r=e.interactable,o=e.element,i=e.rect,l=e.state,a=e.startOffset,s=l.options,u=s.offsetWithOrigin?function(p){var h=p.interaction.element;return(0,z.rectToXY)((0,z.resolveRectLike)(p.state.options.origin,null,null,[h]))||(0,he.default)(p.interactable,h,p.interaction.prepared.name)}(e):{x:0,y:0};if(s.offset==="startCoords")t={x:n.coords.start.page.x,y:n.coords.start.page.y};else{var c=(0,z.resolveRectLike)(s.offset,r,o,[n]);(t=(0,z.rectToXY)(c)||{x:0,y:0}).x+=u.x,t.y+=u.y}var f=s.relativePoints;l.offsets=i&&f&&f.length?f.map(function(p,h){return{index:h,relativePoint:p,x:a.left-i.width*p.x+t.x,y:a.top-i.height*p.y+t.y}}):[{index:0,relativePoint:null,x:t.x,y:t.y}]},set:function(e){var t=e.interaction,n=e.coords,r=e.state,o=r.options,i=r.offsets,l=(0,he.default)(t.interactable,t.element,t.prepared.name),a=(0,_.default)({},n),s=[];o.offsetWithOrigin||(a.x-=l.x,a.y-=l.y);for(var u=0;u<i.length;u++)for(var c=i[u],f=a.x-c.x,p=a.y-c.y,h=0,d=o.targets.length;h<d;h++){var g,m=o.targets[h];(g=v.default.func(m)?m(f,p,t._proxy,c,h):m)&&s.push({x:(v.default.number(g.x)?g.x:f)+c.x,y:(v.default.number(g.y)?g.y:p)+c.y,range:v.default.number(g.range)?g.range:o.range,source:m,index:h,offset:c})}for(var y={target:null,inRange:!1,distance:0,range:0,delta:{x:0,y:0}},b=0;b<s.length;b++){var P=s[b],T=P.range,M=P.x-a.x,A=P.y-a.y,j=(0,ce.default)(M,A),D=j<=T;T===1/0&&y.inRange&&y.range!==1/0&&(D=!1),y.target&&!(D?y.inRange&&T!==1/0?j/T<y.distance/y.range:T===1/0&&y.range!==1/0||j<y.distance:!y.inRange&&j<y.distance)||(y.target=P,y.distance=j,y.range=T,y.inRange=D,y.delta.x=M,y.delta.y=A)}return y.inRange&&(n.x=y.target.x,n.y=y.target.y),r.closest=y,y},defaults:{range:1/0,targets:null,offset:null,offsetWithOrigin:!0,origin:null,relativePoints:null,endOnly:!1,enabled:!1}};pe.snap=Br;var Pi=(0,L.makeModifier)(Br,"snap");pe.default=Pi;var le={};function Yr(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}Object.defineProperty(le,"__esModule",{value:!0}),le.snapSize=le.default=void 0;var Lr={start:function(e){var t=e.state,n=e.edges,r=t.options;if(!n)return null;e.state={options:{targets:null,relativePoints:[{x:n.left?0:1,y:n.top?0:1}],offset:r.offset||"self",origin:{x:0,y:0},range:r.range}},t.targetFields=t.targetFields||[["width","height"],["x","y"]],pe.snap.start(e),t.offsets=e.state.offsets,e.state=t},set:function(e){var t,n,r=e.interaction,o=e.state,i=e.coords,l=o.options,a=o.offsets,s={x:i.x-a[0].x,y:i.y-a[0].y};o.options=(0,_.default)({},l),o.options.targets=[];for(var u=0;u<(l.targets||[]).length;u++){var c=(l.targets||[])[u],f=void 0;if(f=v.default.func(c)?c(s.x,s.y,r):c){for(var p=0;p<o.targetFields.length;p++){var h=(t=o.targetFields[p],n=2,function(y){if(Array.isArray(y))return y}(t)||function(y,b){var P=y==null?null:typeof Symbol<"u"&&y[Symbol.iterator]||y["@@iterator"];if(P!=null){var T,M,A=[],j=!0,D=!1;try{for(P=P.call(y);!(j=(T=P.next()).done)&&(A.push(T.value),!b||A.length!==b);j=!0);}catch(ee){D=!0,M=ee}finally{try{j||P.return==null||P.return()}finally{if(D)throw M}}return A}}(t,n)||function(y,b){if(y){if(typeof y=="string")return Yr(y,b);var P=Object.prototype.toString.call(y).slice(8,-1);return P==="Object"&&y.constructor&&(P=y.constructor.name),P==="Map"||P==="Set"?Array.from(y):P==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(P)?Yr(y,b):void 0}}(t,n)||function(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}()),d=h[0],g=h[1];if(d in f||g in f){f.x=f[d],f.y=f[g];break}}o.options.targets.push(f)}}var m=pe.snap.set(e);return o.options=l,m},defaults:{range:1/0,targets:null,offset:null,endOnly:!1,enabled:!1}};le.snapSize=Lr;var Oi=(0,L.makeModifier)(Lr,"snapSize");le.default=Oi;var Re={};Object.defineProperty(Re,"__esModule",{value:!0}),Re.snapEdges=Re.default=void 0;var Wr={start:function(e){var t=e.edges;return t?(e.state.targetFields=e.state.targetFields||[[t.left?"left":"right",t.top?"top":"bottom"]],le.snapSize.start(e)):null},set:le.snapSize.set,defaults:(0,_.default)((0,be.default)(le.snapSize.defaults),{targets:null,range:null,offset:{x:0,y:0}})};Re.snapEdges=Wr;var Ei=(0,L.makeModifier)(Wr,"snapEdges");Re.default=Ei;var xn={};Object.defineProperty(xn,"__esModule",{value:!0}),Object.defineProperty(xn,"default",{enumerable:!0,get:function(){return Pe.default}});var wn={};Object.defineProperty(wn,"__esModule",{value:!0}),Object.defineProperty(wn,"default",{enumerable:!0,get:function(){return Pe.default}});var ze={};Object.defineProperty(ze,"__esModule",{value:!0}),ze.default=void 0;var Si={aspectRatio:Ie.default,restrictEdges:ne.default,restrict:V.default,restrictRect:De.default,restrictSize:Ae.default,snapEdges:Re.default,snap:pe.default,snapSize:le.default,spring:xn.default,avoid:yn.default,transform:wn.default,rubberband:bn.default};ze.default=Si;var et={};Object.defineProperty(et,"__esModule",{value:!0}),et.default=void 0;var Ti={id:"modifiers",install:function(e){var t=e.interactStatic;for(var n in e.usePlugin(L.default),e.usePlugin(zt.default),t.modifiers=ze.default,ze.default){var r=ze.default[n],o=r._defaults,i=r._methods;o._methods=i,e.defaults.perAction[n]=o}}},ji=Ti;et.default=ji;var Oe={};function _n(e){return _n=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_n(e)}function Mi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Pn(e,t){return Pn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(n,r){return n.__proto__=r,n},Pn(e,t)}function ki(e,t){if(t&&(_n(t)==="object"||typeof t=="function"))return t;if(t!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return On(e)}function On(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ct(e){return Ct=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ct(e)}Object.defineProperty(Oe,"__esModule",{value:!0}),Oe.default=Oe.PointerEvent=void 0;var Ii=function(e){(function(a,s){if(typeof s!="function"&&s!==null)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(s&&s.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),Object.defineProperty(a,"prototype",{writable:!1}),s&&Pn(a,s)})(l,e);var t,n,r,o,i=(r=l,o=function(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}(),function(){var a,s=Ct(r);if(o){var u=Ct(this).constructor;a=Reflect.construct(s,arguments,u)}else a=s.apply(this,arguments);return ki(this,a)});function l(a,s,u,c,f,p){var h;if(function(m,y){if(!(m instanceof y))throw new TypeError("Cannot call a class as a function")}(this,l),h=i.call(this,f),w.pointerExtend(On(h),u),u!==s&&w.pointerExtend(On(h),s),h.timeStamp=p,h.originalEvent=u,h.type=a,h.pointerId=w.getPointerId(s),h.pointerType=w.getPointerType(s),h.target=c,h.currentTarget=null,a==="tap"){var d=f.getPointerIndex(s);h.dt=h.timeStamp-f.pointers[d].downTime;var g=h.timeStamp-f.tapTime;h.double=!!f.prevTap&&f.prevTap.type!=="doubletap"&&f.prevTap.target===h.target&&g<500}else a==="doubletap"&&(h.dt=s.timeStamp-f.tapTime,h.double=!0);return h}return t=l,(n=[{key:"_subtractOrigin",value:function(a){var s=a.x,u=a.y;return this.pageX-=s,this.pageY-=u,this.clientX-=s,this.clientY-=u,this}},{key:"_addOrigin",value:function(a){var s=a.x,u=a.y;return this.pageX+=s,this.pageY+=u,this.clientX+=s,this.clientY+=u,this}},{key:"preventDefault",value:function(){this.originalEvent.preventDefault()}}])&&Mi(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),l}(je.BaseEvent);Oe.PointerEvent=Oe.default=Ii;var tt={};Object.defineProperty(tt,"__esModule",{value:!0}),tt.default=void 0;var Ft={id:"pointer-events/base",before:["inertia","modifiers","auto-start","actions"],install:function(e){e.pointerEvents=Ft,e.defaults.actions.pointerEvents=Ft.defaults,(0,_.default)(e.actions.phaselessTypes,Ft.types)},listeners:{"interactions:new":function(e){var t=e.interaction;t.prevTap=null,t.tapTime=0},"interactions:update-pointer":function(e){var t=e.down,n=e.pointerInfo;!t&&n.hold||(n.hold={duration:1/0,timeout:null})},"interactions:move":function(e,t){var n=e.interaction,r=e.pointer,o=e.event,i=e.eventTarget;e.duplicate||n.pointerIsDown&&!n.pointerWasMoved||(n.pointerIsDown&&En(e),ve({interaction:n,pointer:r,event:o,eventTarget:i,type:"move"},t))},"interactions:down":function(e,t){(function(n,r){for(var o=n.interaction,i=n.pointer,l=n.event,a=n.eventTarget,s=n.pointerIndex,u=o.pointers[s].hold,c=O.getPath(a),f={interaction:o,pointer:i,event:l,eventTarget:a,type:"hold",targets:[],path:c,node:null},p=0;p<c.length;p++){var h=c[p];f.node=h,r.fire("pointerEvents:collect-targets",f)}if(f.targets.length){for(var d=1/0,g=0;g<f.targets.length;g++){var m=f.targets[g].eventable.options.holdDuration;m<d&&(d=m)}u.duration=d,u.timeout=setTimeout(function(){ve({interaction:o,eventTarget:a,pointer:i,event:l,type:"hold"},r)},d)}})(e,t),ve(e,t)},"interactions:up":function(e,t){En(e),ve(e,t),function(n,r){var o=n.interaction,i=n.pointer,l=n.event,a=n.eventTarget;o.pointerWasMoved||ve({interaction:o,eventTarget:a,pointer:i,event:l,type:"tap"},r)}(e,t)},"interactions:cancel":function(e,t){En(e),ve(e,t)}},PointerEvent:Oe.PointerEvent,fire:ve,collectEventTargets:Nr,defaults:{holdDuration:600,ignoreFrom:null,allowFrom:null,origin:{x:0,y:0}},types:{down:!0,move:!0,up:!0,cancel:!0,tap:!0,doubletap:!0,hold:!0}};function ve(e,t){var n=e.interaction,r=e.pointer,o=e.event,i=e.eventTarget,l=e.type,a=e.targets,s=a===void 0?Nr(e,t):a,u=new Oe.PointerEvent(l,r,o,i,n,t.now());t.fire("pointerEvents:new",{pointerEvent:u});for(var c={interaction:n,pointer:r,event:o,eventTarget:i,targets:s,type:l,pointerEvent:u},f=0;f<s.length;f++){var p=s[f];for(var h in p.props||{})u[h]=p.props[h];var d=(0,he.default)(p.eventable,p.node);if(u._subtractOrigin(d),u.eventable=p.eventable,u.currentTarget=p.node,p.eventable.fire(u),u._addOrigin(d),u.immediatePropagationStopped||u.propagationStopped&&f+1<s.length&&s[f+1].node!==u.currentTarget)break}if(t.fire("pointerEvents:fired",c),l==="tap"){var g=u.double?ve({interaction:n,pointer:r,event:o,eventTarget:i,type:"doubletap"},t):u;n.prevTap=g,n.tapTime=g.timeStamp}return u}function Nr(e,t){var n=e.interaction,r=e.pointer,o=e.event,i=e.eventTarget,l=e.type,a=n.getPointerIndex(r),s=n.pointers[a];if(l==="tap"&&(n.pointerWasMoved||!s||s.downTarget!==i))return[];for(var u=O.getPath(i),c={interaction:n,pointer:r,event:o,eventTarget:i,type:l,path:u,targets:[],node:null},f=0;f<u.length;f++){var p=u[f];c.node=p,t.fire("pointerEvents:collect-targets",c)}return l==="hold"&&(c.targets=c.targets.filter(function(h){var d;return h.eventable.options.holdDuration===((d=n.pointers[a])==null?void 0:d.hold.duration)})),c.targets}function En(e){var t=e.interaction,n=e.pointerIndex,r=t.pointers[n].hold;r&&r.timeout&&(clearTimeout(r.timeout),r.timeout=null)}var Di=Ft;tt.default=Di;var Xt={};function Ai(e){var t=e.interaction;t.holdIntervalHandle&&(clearInterval(t.holdIntervalHandle),t.holdIntervalHandle=null)}Object.defineProperty(Xt,"__esModule",{value:!0}),Xt.default=void 0;var Ri={id:"pointer-events/holdRepeat",install:function(e){e.usePlugin(tt.default);var t=e.pointerEvents;t.defaults.holdRepeatInterval=0,t.types.holdrepeat=e.actions.phaselessTypes.holdrepeat=!0},listeners:["move","up","cancel","endall"].reduce(function(e,t){return e["pointerEvents:".concat(t)]=Ai,e},{"pointerEvents:new":function(e){var t=e.pointerEvent;t.type==="hold"&&(t.count=(t.count||0)+1)},"pointerEvents:fired":function(e,t){var n=e.interaction,r=e.pointerEvent,o=e.eventTarget,i=e.targets;if(r.type==="hold"&&i.length){var l=i[0].eventable.options.holdRepeatInterval;l<=0||(n.holdIntervalHandle=setTimeout(function(){t.pointerEvents.fire({interaction:n,eventTarget:o,type:"hold",pointer:r,event:r},t)},l))}}})},zi=Ri;Xt.default=zi;var Bt={};function Ci(e){return(0,_.default)(this.events.options,e),this}Object.defineProperty(Bt,"__esModule",{value:!0}),Bt.default=void 0;var Fi={id:"pointer-events/interactableTargets",install:function(e){var t=e.Interactable;t.prototype.pointerEvents=Ci;var n=t.prototype._backCompatOption;t.prototype._backCompatOption=function(r,o){var i=n.call(this,r,o);return i===this&&(this.events.options[r]=o),i}},listeners:{"pointerEvents:collect-targets":function(e,t){var n=e.targets,r=e.node,o=e.type,i=e.eventTarget;t.interactables.forEachMatch(r,function(l){var a=l.events,s=a.options;a.types[o]&&a.types[o].length&&l.testIgnoreAllow(s,r,i)&&n.push({node:r,eventable:a,props:{interactable:l}})})},"interactable:new":function(e){var t=e.interactable;t.events.getRect=function(n){return t.getRect(n)}},"interactable:set":function(e,t){var n=e.interactable,r=e.options;(0,_.default)(n.events.options,t.pointerEvents.defaults),(0,_.default)(n.events.options,r.pointerEvents||{})}}},Xi=Fi;Bt.default=Xi;var nt={};Object.defineProperty(nt,"__esModule",{value:!0}),nt.default=void 0;var Bi={id:"pointer-events",install:function(e){e.usePlugin(tt),e.usePlugin(Xt.default),e.usePlugin(Bt.default)}},Yi=Bi;nt.default=Yi;var Ce={};function Ur(e){var t=e.Interactable;e.actions.phases.reflow=!0,t.prototype.reflow=function(n){return function(r,o,i){for(var l=v.default.string(r.target)?k.from(r._context.querySelectorAll(r.target)):[r.target],a=i.window.Promise,s=a?[]:null,u=function(){var f=l[c],p=r.getRect(f);if(!p)return"break";var h=k.find(i.interactions.list,function(b){return b.interacting()&&b.interactable===r&&b.element===f&&b.prepared.name===o.name}),d=void 0;if(h)h.move(),s&&(d=h._reflowPromise||new a(function(b){h._reflowResolve=b}));else{var g=(0,z.tlbrToXywh)(p),m={page:{x:g.x,y:g.y},client:{x:g.x,y:g.y},timeStamp:i.now()},y=w.coordsToEvent(m);d=function(b,P,T,M,A){var j=b.interactions.new({pointerType:"reflow"}),D={interaction:j,event:A,pointer:A,eventTarget:T,phase:"reflow"};j.interactable=P,j.element=T,j.prevEvent=A,j.updatePointer(A,A,T,!0),w.setZeroCoords(j.coords.delta),(0,H.copyAction)(j.prepared,M),j._doPhase(D);var ee=b.window.Promise,ue=ee?new ee(function(jn){j._reflowResolve=jn}):void 0;return j._reflowPromise=ue,j.start(M,P,T),j._interacting?(j.move(D),j.end(A)):(j.stop(),j._reflowResolve()),j.removePointer(A,A),ue}(i,r,f,o,y)}s&&s.push(d)},c=0;c<l.length&&u()!=="break";c++);return s&&a.all(s).then(function(){return r})}(this,n,e)}}Object.defineProperty(Ce,"__esModule",{value:!0}),Ce.default=void 0,Ce.install=Ur;var Li={id:"reflow",install:Ur,listeners:{"interactions:stop":function(e,t){var n=e.interaction;n.pointerType==="reflow"&&(n._reflowResolve&&n._reflowResolve(),k.remove(t.interactions.list,n))}}},Wi=Li;Ce.default=Wi;var Q={exports:{}};function Sn(e){return Sn=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Sn(e)}Object.defineProperty(Q.exports,"__esModule",{value:!0}),Q.exports.default=void 0,N.default.use(me.default),N.default.use(fe.default),N.default.use(nt.default),N.default.use(_e.default),N.default.use(et.default),N.default.use(Le.default),N.default.use(Be.default),N.default.use(ae.default),N.default.use(Ce.default);var Ni=N.default;if(Q.exports.default=Ni,Sn(Q)==="object"&&Q)try{Q.exports=N.default}catch{}N.default.default=N.default,Be.default,ae.default,Le.default,me.default,mt.default,_e.default,N.default,et.default,fe.default,nt.default,Ce.default,Q=Q.exports;var Ee={exports:{}};function Tn(e){return Tn=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Tn(e)}Object.defineProperty(Ee.exports,"__esModule",{value:!0}),Ee.exports.default=void 0;var Ui=Q.default;if(Ee.exports.default=Ui,Tn(Ee)==="object"&&Ee)try{Ee.exports=Q.default}catch{}return Q.default.default=Q.default,Ee.exports})});function qr(){window.$=document.querySelectorAll.bind(document),Node.prototype.on=window.on=function(S,x){this.addEventListener(S,x)},NodeList.prototype.__proto__=Array.prototype,NodeList.prototype.on=NodeList.prototype.addEventListener=function(S,x){this.forEach(function(R,X){R.on(S,x)})}}var kn=Ji(Gr());qr();var Yt=[],Qi=()=>{let S=document.body.scrollHeight,x=window.innerWidth,X=$(".sticky")[0].getBoundingClientRect(),U=X.top-window.innerHeight+X.height,v=S-U,K=$(".plants")[0];ea(U,v),ta(x),na(K),ia()},ea=(S,x)=>{let R=$(".plant");R.forEach((X,U)=>{let v=x/(R.length+3),K={target:S+v*U,node:X};Yt.push(K)})},ta=S=>{let x=$(".inner"),R=(S-x.length*200)/(x.length-1);x.forEach((X,U)=>{let v=$(".plant-image")[0].cloneNode(!0);X.appendChild(v);let K=200*U+R*U;X.style.transform="translate("+K+"px, 0px)",X.setAttribute("data-x",K)})},na=S=>{(0,kn.default)(".inner").draggable({inertia:!0,modifiers:[kn.default.modifiers.restrictRect({restriction:S,endOnly:!0})],listeners:{move:ra}})},ra=S=>{var x=S.target,R=(parseFloat(x.getAttribute("data-x"))||0)+S.dx,X=(parseFloat(x.getAttribute("data-y"))||0)+S.dy;x.style.transform="translate("+R+"px, "+X+"px)",x.setAttribute("data-x",R),x.setAttribute("data-y",X)},oa=()=>{target=window.scrollY||window.pageYOffset;let S=[];Yt.forEach(R=>{target>R.target&&(R.node.classList.add("animated"),S.push(R))}),Yt=Yt.filter(R=>!S.includes(R))},ia=()=>{window.addEventListener("scroll",oa)};Qi();})();
//# sourceMappingURL=data:application/json;base64,
